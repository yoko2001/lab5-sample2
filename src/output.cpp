#include"output.h"
extern ofstream asmo;

static void EmitFunctions(TreeNode* prog){

}

void SetupReg(){
    X86Regs[EAX] = CreateReg(new std::string("eax"), 
    new std::string("[eax]"), EAX);
    X86Regs[EBX] = CreateReg(new std::string("ebx"), 
    new std::string("[ebx]"), EBX);
    X86Regs[ECX] = CreateReg(new std::string("ecx"), 
    new std::string("[ecx]"), ECX);
    X86Regs[EDX] = CreateReg(new std::string("edx"), 
    new std::string("[edx]"), EDX);
    X86Regs[ESI] = CreateReg(new std::string("esi"), 
    new std::string("[esi]"), ESI);
    X86Regs[EDI] = CreateReg(new std::string("edi"), 
    new std::string("[edi]"), EDI);
}
static void StartProgram(){
    for(int i = EAX; i <= EDI; i++){
        if(X86Regs[i] != NULL){
            X86Regs[i]->p_val = NULL;
        }
    }

    asmo << "# Code auto-generated by DJLCC\n\n";
}

static void SegmentData(){
    asmo << ".DATA\n\n";
}

static void SegmentCode(){
    asmo << ".CODE\n\n";
}

/**
 * Emit String Consts
 */
static void DefineString(domain_elem*str){
    asmo << *str->s << ":\n";
    asmo << "\t";
    asmo << ".string "<< '\"' << str->str_val << '\"' << endl;
}
extern vector<domain_elem*>Strings;
static void EmitStrings(){
    for(int i = 0; i < Strings.size(); i++){
        DefineString(Strings[i]);
    }
    asmo << "\n";
}
extern domain* d_root;

static void DefineCommonData(domain_elem* var){
    asmo  << "\t.globl  " << *var->s  << endl;
    asmo << "\t.data" << endl;
    asmo << "\t.align " << var->ty->align << endl;
    asmo << "\t.type   " << *var->s << ", @object" << endl;
    int size = var->ty->size;
    if (size <= 0) size = 1;
    asmo << "\t.size   " << *var->s << ", " << size << endl;
    asmo << *var->s << ":" << endl;
}
static void EmitGlobals(){
    int len = d_root->elements.size();
    domain_elem* var;
    for(int i = 0; i < len; i++){
        var = d_root->elements[i];
        if(var->kind == DEK_variable){
            DefineCommonData(var);
        }
    }
}

void EmitProg(TreeNode* program){
    SetupReg();

    StartProgram(); 

    //SegmentData();
    EmitGlobals();
    EmitStrings();

    
}