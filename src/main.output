Nonterminals useless in grammar

   argument-expression-list


Terminals unused in grammar

   T_STRING
   KW_RET
   CHAR
   BOOL
   STRING


Rules useless in grammar

  136 argument-expression-list: assignment-expression
  137                         | argument-expression-list LO_COMMA assignment-expression


Rules useless in parser due to conflicts

   19 expression-statement: SEMICOLON

   25 block-item: declaration

  121 specifier-qualifier-list: type-specifier
  123                         | type-qualifier


State 0 conflicts: 27 shift/reduce
State 18 conflicts: 11 shift/reduce
State 22 conflicts: 30 reduce/reduce
State 27 conflicts: 28 shift/reduce
State 29 conflicts: 27 shift/reduce, 1 reduce/reduce
State 37 conflicts: 2 shift/reduce
State 38 conflicts: 8 shift/reduce, 30 reduce/reduce
State 58 conflicts: 8 shift/reduce, 30 reduce/reduce
State 74 conflicts: 28 shift/reduce
State 76 conflicts: 28 reduce/reduce
State 126 conflicts: 1 shift/reduce
State 127 conflicts: 8 shift/reduce
State 167 conflicts: 8 shift/reduce
State 168 conflicts: 8 shift/reduce, 2 reduce/reduce
State 169 conflicts: 8 shift/reduce, 2 reduce/reduce
State 170 conflicts: 8 shift/reduce
State 173 conflicts: 27 shift/reduce
State 176 conflicts: 27 shift/reduce
State 186 conflicts: 8 shift/reduce
State 194 conflicts: 1 shift/reduce
State 207 conflicts: 27 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement

    4 statement: SEMICOLON
    5          | declaration
    6          | compound-statement
    7          | expression-statement
    8          | selection-statement
    9          | iteration-statement
   10          | jump-statement

   11 jump-statement: KW_BREAK SEMICOLON
   12               | KW_CONTINUE SEMICOLON

   13 iteration-statement: KW_WHILE L_BRACKET expression R_BRACKET statement
   14                    | KW_DO statement KW_WHILE L_BRACKET expression R_BRACKET
   15                    | KW_FOR L_BRACKET SEMICOLON SEMICOLON R_BRACKET
   16                    | KW_FOR L_BRACKET expression SEMICOLON expression SEMICOLON expression R_BRACKET

   17 selection-statement: KW_IF L_BRACKET expression R_BRACKET statement
   18                    | KW_IF L_BRACKET expression R_BRACKET statement KW_ELSE statement

   19 expression-statement: SEMICOLON
   20                     | expression SEMICOLON

   21 compound-statement: L_BRACE block-item-list R_BRACE
   22                   | L_BRACE R_BRACE

   23 block-item-list: block-item
   24                | block-item-list block-item

   25 block-item: declaration
   26           | statement

   27 declaration: declaration-specifiers init-declarator-list SEMICOLON
   28            | declaration-specifiers

   29 declaration-specifiers: type-specifier
   30                       | type-specifier declaration-specifiers
   31                       | type-qualifier
   32                       | type-qualifier declaration-specifiers

   33 type-qualifier: %empty

   34 init-declarator-list: init-declarator
   35                     | init-declarator-list LO_COMMA init-declarator

   36 init-declarator: declarator
   37                | declarator RO_ASSIGN initializer

   38 initializer: assignment-expression
   39            | L_BRACE initializer-list R_BRACE

   40 initializer-list: initializer
   41                 | initializer-list LO_COMMA initializer

   42 expression: assignment-expression
   43           | expression LO_COMMA assignment-expression

   44 assignment-operator: RO_ASSIGN
   45                    | RO_AS_ADDEQ
   46                    | RO_AS_ANDEQ
   47                    | RO_AS_DIVEQ
   48                    | RO_AS_MULEQ
   49                    | RO_AS_OREQ
   50                    | RO_AS_SFTL_EQ
   51                    | RO_AS_SFTR_EQ
   52                    | RO_AS_SUBEQ

   53 assignment-expression: conditional-expression
   54                      | unary-expression assignment-operator assignment-expression

   55 conditional-expression: logical-OR-expression
   56                       | logical-OR-expression RO_TRI_QUES expression RO_TRI_COLON conditional-expression

   57 logical-OR-expression: logical-AND-expression
   58                      | logical-OR-expression LO_LGC_OR logical-AND-expression

   59 logical-AND-expression: inclusive-OR-expression
   60                       | logical-AND-expression LO_LGC_AND inclusive-OR-expression

   61 inclusive-OR-expression: exclusive-OR-expression
   62                        | inclusive-OR-expression LO_BIT_OR exclusive-OR-expression

   63 exclusive-OR-expression: AND-expression
   64                        | exclusive-OR-expression LO_BIT_XOR AND-expression

   65 AND-expression: equality-expression
   66               | AND-expression LO_BIT_AND equality-expression

   67 equality-expression: relational-expression
   68                    | equality-expression LO_EQ relational-expression
   69                    | equality-expression LO_N_EQ relational-expression

   70 relational-expression: shift-expression
   71                      | relational-expression LO_REL_L shift-expression
   72                      | relational-expression LO_REL_G shift-expression
   73                      | relational-expression LO_REL_LE shift-expression
   74                      | relational-expression LO_REL_GE shift-expression

   75 shift-expression: additive-expression
   76                 | shift-expression LO_SFT_L additive-expression
   77                 | shift-expression LO_SFT_R additive-expression

   78 additive-expression: multiplicative-expression
   79                    | additive-expression LO_ADD multiplicative-expression
   80                    | additive-expression LO_SUB multiplicative-expression

   81 multiplicative-expression: cast-expression
   82                          | multiplicative-expression LO_MUL cast-expression
   83                          | multiplicative-expression LO_DIV cast-expression
   84                          | multiplicative-expression LO_MOD cast-expression

   85 cast-expression: unary-expression
   86                | L_BRACKET type-specifier R_BRACKET cast-expression

   87 unary-operator: LO_BIT_AND
   88               | LO_MUL
   89               | LO_ADD
   90               | LO_SUB
   91               | LO_BIT_NOT
   92               | LO_LGC_NOT

   93 unary-expression: postfix-expression
   94                 | LO_AS_SELFINC unary-expression
   95                 | LO_AS_SELFDEC unary-expression
   96                 | unary-operator cast-expression

   97 postfix-expression: primary-expression
   98                   | postfix-expression L_SQ_BRACKET expression R_SQ_BRACKET
   99                   | postfix-expression LO_MEMBER IDENTIFIER
  100                   | postfix-expression LO_PT_MEMBER IDENTIFIER
  101                   | postfix-expression LO_AS_SELFINC
  102                   | postfix-expression LO_AS_SELFDEC

  103 primary-expression: IDENTIFIER
  104                   | constant
  105                   | L_BRACKET expression R_BRACKET

  106 constant: INTEGER

  107 type-specifier: T_INT
  108               | T_CHAR
  109               | T_BOOL
  110               | T_SIGNED
  111               | T_UNSIGNED
  112               | struct-or-union-specifier

  113 struct-or-union-specifier: struct-or-union IDENTIFIER L_BRACE struct-declaration-list R_BRACE
  114                          | struct-or-union L_BRACE struct-declaration-list R_BRACE
  115                          | struct-or-union IDENTIFIER

  116 struct-or-union: KW_STRUCT
  117                | KW_UNION

  118 struct-declaration-list: struct-declaration
  119                        | struct-declaration-list struct-declaration

  120 struct-declaration: specifier-qualifier-list struct-declarator-list SEMICOLON

  121 specifier-qualifier-list: type-specifier
  122                         | type-specifier specifier-qualifier-list
  123                         | type-qualifier
  124                         | type-qualifier specifier-qualifier-list

  125 struct-declarator-list: struct-declarator
  126                       | struct-declarator-list LO_COMMA struct-declarator

  127 struct-declarator: declarator
  128                  | declarator COLON INTEGER

  129 declarator: pointer direct-declarator
  130           | direct-declarator

  131 direct-declarator: IDENTIFIER
  132                  | direct-declarator L_SQ_BRACKET assignment-expression R_SQ_BRACKET

  133 pointer: LO_MUL
  134        | LO_MUL pointer

  135 type-qualifier: Q_CONST


Terminals, with rules where they appear

$end (0) 0
error (256)
T_CHAR (258) 108
T_INT (259) 107
T_STRING (260)
T_BOOL (261) 109
LO_EQ (262) 68
LO_N_EQ (263) 69
RO_AS_ADDEQ (264) 45
RO_AS_SUBEQ (265) 52
RO_AS_MULEQ (266) 48
RO_AS_DIVEQ (267) 47
RO_AS_SFTL_EQ (268) 50
RO_AS_SFTR_EQ (269) 51
RO_AS_ANDEQ (270) 46
RO_AS_OREQ (271) 49
LO_AS_SELFINC (272) 94 101
LO_AS_SELFDEC (273) 95 102
RO_TRI_QUES (274) 56
RO_TRI_COLON (275) 56
LO_MUL (276) 82 88 133 134
LO_DIV (277) 83
LO_ADD (278) 79 89
LO_SUB (279) 80 90
LO_BIT_NOT (280) 91
LO_MOD (281) 84
LO_SFT_L (282) 76
LO_LGC_OR (283) 58
LO_LGC_AND (284) 60
LO_SFT_R (285) 77
LO_LGC_NOT (286) 92
LO_BIT_XOR (287) 64
LO_BIT_AND (288) 66 87
LO_BIT_OR (289) 62
RO_ASSIGN (290) 37 44
LO_COMMA (291) 35 41 43 126
KW_CONTINUE (292) 12
KW_BREAK (293) 11
KW_IF (294) 17 18
KW_FOR (295) 15 16
KW_RET (296)
KW_STRUCT (297) 116
KW_WHILE (298) 13 14
KW_DO (299) 14
KW_ELSE (300) 18
T_SIGNED (301) 110
T_UNSIGNED (302) 111
Q_CONST (303) 135
SEMICOLON (304) 4 11 12 15 16 19 20 27 120
COLON (305) 128
LO_REL_L (306) 71
LO_REL_G (307) 72
LO_REL_LE (308) 73
LO_REL_GE (309) 74
KW_UNION (310) 117
IDENTIFIER (311) 99 100 103 113 115 131
INTEGER (312) 106 128
CHAR (313)
BOOL (314)
STRING (315)
LO_MEMBER (316) 99
LO_PT_MEMBER (317) 100
L_BRACKET (318) 13 14 15 16 17 18 86 105
R_BRACKET (319) 13 14 15 16 17 18 86 105
L_SQ_BRACKET (320) 98 132
R_SQ_BRACKET (321) 98 132
L_BRACE (322) 21 22 39 113 114
R_BRACE (323) 21 22 39 113 114


Nonterminals, with rules where they appear

$accept (69)
    on left: 0
program (70)
    on left: 1, on right: 0
statements (71)
    on left: 2 3, on right: 1 3
statement (72)
    on left: 4 5 6 7 8 9 10, on right: 2 3 13 14 17 18 26
jump-statement (73)
    on left: 11 12, on right: 10
iteration-statement (74)
    on left: 13 14 15 16, on right: 9
selection-statement (75)
    on left: 17 18, on right: 8
expression-statement (76)
    on left: 19 20, on right: 7
compound-statement (77)
    on left: 21 22, on right: 6
block-item-list (78)
    on left: 23 24, on right: 21 24
block-item (79)
    on left: 25 26, on right: 23 24
declaration (80)
    on left: 27 28, on right: 5 25
declaration-specifiers (81)
    on left: 29 30 31 32, on right: 27 28 30 32
type-qualifier (82)
    on left: 33 135, on right: 31 32 123 124
init-declarator-list (83)
    on left: 34 35, on right: 27 35
init-declarator (84)
    on left: 36 37, on right: 34 35
initializer (85)
    on left: 38 39, on right: 37 40 41
initializer-list (86)
    on left: 40 41, on right: 39 41
expression (87)
    on left: 42 43, on right: 13 14 16 17 18 20 43 56 98 105
assignment-operator (88)
    on left: 44 45 46 47 48 49 50 51 52, on right: 54
assignment-expression (89)
    on left: 53 54, on right: 38 42 43 54 132
conditional-expression (90)
    on left: 55 56, on right: 53 56
logical-OR-expression (91)
    on left: 57 58, on right: 55 56 58
logical-AND-expression (92)
    on left: 59 60, on right: 57 58 60
inclusive-OR-expression (93)
    on left: 61 62, on right: 59 60 62
exclusive-OR-expression (94)
    on left: 63 64, on right: 61 62 64
AND-expression (95)
    on left: 65 66, on right: 63 64 66
equality-expression (96)
    on left: 67 68 69, on right: 65 66 68 69
relational-expression (97)
    on left: 70 71 72 73 74, on right: 67 68 69 71 72 73 74
shift-expression (98)
    on left: 75 76 77, on right: 70 71 72 73 74 76 77
additive-expression (99)
    on left: 78 79 80, on right: 75 76 77 79 80
multiplicative-expression (100)
    on left: 81 82 83 84, on right: 78 79 80 82 83 84
cast-expression (101)
    on left: 85 86, on right: 81 82 83 84 86 96
unary-operator (102)
    on left: 87 88 89 90 91 92, on right: 96
unary-expression (103)
    on left: 93 94 95 96, on right: 54 85 94 95
postfix-expression (104)
    on left: 97 98 99 100 101 102, on right: 93 98 99 100 101 102
primary-expression (105)
    on left: 103 104 105, on right: 97
constant (106)
    on left: 106, on right: 104
type-specifier (107)
    on left: 107 108 109 110 111 112, on right: 29 30 86 121 122
struct-or-union-specifier (108)
    on left: 113 114 115, on right: 112
struct-or-union (109)
    on left: 116 117, on right: 113 114 115
struct-declaration-list (110)
    on left: 118 119, on right: 113 114 119
struct-declaration (111)
    on left: 120, on right: 118 119
specifier-qualifier-list (112)
    on left: 121 122 123 124, on right: 120 122 124
struct-declarator-list (113)
    on left: 125 126, on right: 120 126
struct-declarator (114)
    on left: 127 128, on right: 125 126
declarator (115)
    on left: 129 130, on right: 36 37 127 128
direct-declarator (116)
    on left: 131 132, on right: 129 130 132
pointer (117)
    on left: 133 134, on right: 129 134


State 0

    0 $accept: . program $end

    T_CHAR         shift, and go to state 1
    T_INT          shift, and go to state 2
    T_BOOL         shift, and go to state 3
    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    KW_CONTINUE    shift, and go to state 12
    KW_BREAK       shift, and go to state 13
    KW_IF          shift, and go to state 14
    KW_FOR         shift, and go to state 15
    KW_STRUCT      shift, and go to state 16
    KW_WHILE       shift, and go to state 17
    KW_DO          shift, and go to state 18
    T_SIGNED       shift, and go to state 19
    T_UNSIGNED     shift, and go to state 20
    Q_CONST        shift, and go to state 21
    SEMICOLON      shift, and go to state 22
    KW_UNION       shift, and go to state 23
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26
    L_BRACE        shift, and go to state 27

    T_CHAR         [reduce using rule 33 (type-qualifier)]
    T_INT          [reduce using rule 33 (type-qualifier)]
    T_BOOL         [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFINC  [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFDEC  [reduce using rule 33 (type-qualifier)]
    LO_MUL         [reduce using rule 33 (type-qualifier)]
    LO_ADD         [reduce using rule 33 (type-qualifier)]
    LO_SUB         [reduce using rule 33 (type-qualifier)]
    LO_BIT_NOT     [reduce using rule 33 (type-qualifier)]
    LO_LGC_NOT     [reduce using rule 33 (type-qualifier)]
    LO_BIT_AND     [reduce using rule 33 (type-qualifier)]
    KW_CONTINUE    [reduce using rule 33 (type-qualifier)]
    KW_BREAK       [reduce using rule 33 (type-qualifier)]
    KW_IF          [reduce using rule 33 (type-qualifier)]
    KW_FOR         [reduce using rule 33 (type-qualifier)]
    KW_STRUCT      [reduce using rule 33 (type-qualifier)]
    KW_WHILE       [reduce using rule 33 (type-qualifier)]
    KW_DO          [reduce using rule 33 (type-qualifier)]
    T_SIGNED       [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED     [reduce using rule 33 (type-qualifier)]
    Q_CONST        [reduce using rule 33 (type-qualifier)]
    SEMICOLON      [reduce using rule 33 (type-qualifier)]
    KW_UNION       [reduce using rule 33 (type-qualifier)]
    IDENTIFIER     [reduce using rule 33 (type-qualifier)]
    INTEGER        [reduce using rule 33 (type-qualifier)]
    L_BRACKET      [reduce using rule 33 (type-qualifier)]
    L_BRACE        [reduce using rule 33 (type-qualifier)]
    $default       reduce using rule 33 (type-qualifier)

    program                    go to state 28
    statements                 go to state 29
    statement                  go to state 30
    jump-statement             go to state 31
    iteration-statement        go to state 32
    selection-statement        go to state 33
    expression-statement       go to state 34
    compound-statement         go to state 35
    declaration                go to state 36
    declaration-specifiers     go to state 37
    type-qualifier             go to state 38
    expression                 go to state 39
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57
    type-specifier             go to state 58
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60


State 1

  108 type-specifier: T_CHAR .

    $default  reduce using rule 108 (type-specifier)


State 2

  107 type-specifier: T_INT .

    $default  reduce using rule 107 (type-specifier)


State 3

  109 type-specifier: T_BOOL .

    $default  reduce using rule 109 (type-specifier)


State 4

   94 unary-expression: LO_AS_SELFINC . unary-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 61

    unary-operator      go to state 53
    unary-expression    go to state 62
    postfix-expression  go to state 55
    primary-expression  go to state 56
    constant            go to state 57


State 5

   95 unary-expression: LO_AS_SELFDEC . unary-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 61

    unary-operator      go to state 53
    unary-expression    go to state 63
    postfix-expression  go to state 55
    primary-expression  go to state 56
    constant            go to state 57


State 6

   88 unary-operator: LO_MUL .

    $default  reduce using rule 88 (unary-operator)


State 7

   89 unary-operator: LO_ADD .

    $default  reduce using rule 89 (unary-operator)


State 8

   90 unary-operator: LO_SUB .

    $default  reduce using rule 90 (unary-operator)


State 9

   91 unary-operator: LO_BIT_NOT .

    $default  reduce using rule 91 (unary-operator)


State 10

   92 unary-operator: LO_LGC_NOT .

    $default  reduce using rule 92 (unary-operator)


State 11

   87 unary-operator: LO_BIT_AND .

    $default  reduce using rule 87 (unary-operator)


State 12

   12 jump-statement: KW_CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 64


State 13

   11 jump-statement: KW_BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 65


State 14

   17 selection-statement: KW_IF . L_BRACKET expression R_BRACKET statement
   18                    | KW_IF . L_BRACKET expression R_BRACKET statement KW_ELSE statement

    L_BRACKET  shift, and go to state 66


State 15

   15 iteration-statement: KW_FOR . L_BRACKET SEMICOLON SEMICOLON R_BRACKET
   16                    | KW_FOR . L_BRACKET expression SEMICOLON expression SEMICOLON expression R_BRACKET

    L_BRACKET  shift, and go to state 67


State 16

  116 struct-or-union: KW_STRUCT .

    $default  reduce using rule 116 (struct-or-union)


State 17

   13 iteration-statement: KW_WHILE . L_BRACKET expression R_BRACKET statement

    L_BRACKET  shift, and go to state 68


State 18

   14 iteration-statement: KW_DO . statement KW_WHILE L_BRACKET expression R_BRACKET

    T_CHAR         shift, and go to state 1
    T_INT          shift, and go to state 2
    T_BOOL         shift, and go to state 3
    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    KW_CONTINUE    shift, and go to state 12
    KW_BREAK       shift, and go to state 13
    KW_IF          shift, and go to state 14
    KW_FOR         shift, and go to state 15
    KW_STRUCT      shift, and go to state 16
    KW_WHILE       shift, and go to state 17
    KW_DO          shift, and go to state 18
    T_SIGNED       shift, and go to state 19
    T_UNSIGNED     shift, and go to state 20
    Q_CONST        shift, and go to state 21
    SEMICOLON      shift, and go to state 22
    KW_UNION       shift, and go to state 23
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26
    L_BRACE        shift, and go to state 27

    T_CHAR      [reduce using rule 33 (type-qualifier)]
    T_INT       [reduce using rule 33 (type-qualifier)]
    T_BOOL      [reduce using rule 33 (type-qualifier)]
    LO_MUL      [reduce using rule 33 (type-qualifier)]
    KW_STRUCT   [reduce using rule 33 (type-qualifier)]
    KW_WHILE    [reduce using rule 33 (type-qualifier)]
    T_SIGNED    [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED  [reduce using rule 33 (type-qualifier)]
    Q_CONST     [reduce using rule 33 (type-qualifier)]
    KW_UNION    [reduce using rule 33 (type-qualifier)]
    IDENTIFIER  [reduce using rule 33 (type-qualifier)]

    statement                  go to state 69
    jump-statement             go to state 31
    iteration-statement        go to state 32
    selection-statement        go to state 33
    expression-statement       go to state 34
    compound-statement         go to state 35
    declaration                go to state 36
    declaration-specifiers     go to state 37
    type-qualifier             go to state 38
    expression                 go to state 39
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57
    type-specifier             go to state 58
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60


State 19

  110 type-specifier: T_SIGNED .

    $default  reduce using rule 110 (type-specifier)


State 20

  111 type-specifier: T_UNSIGNED .

    $default  reduce using rule 111 (type-specifier)


State 21

  135 type-qualifier: Q_CONST .

    $default  reduce using rule 135 (type-qualifier)


State 22

    4 statement: SEMICOLON .
   19 expression-statement: SEMICOLON .

    $end           reduce using rule 4 (statement)
    $end           [reduce using rule 19 (expression-statement)]
    T_CHAR         reduce using rule 4 (statement)
    T_CHAR         [reduce using rule 19 (expression-statement)]
    T_INT          reduce using rule 4 (statement)
    T_INT          [reduce using rule 19 (expression-statement)]
    T_BOOL         reduce using rule 4 (statement)
    T_BOOL         [reduce using rule 19 (expression-statement)]
    LO_AS_SELFINC  reduce using rule 4 (statement)
    LO_AS_SELFINC  [reduce using rule 19 (expression-statement)]
    LO_AS_SELFDEC  reduce using rule 4 (statement)
    LO_AS_SELFDEC  [reduce using rule 19 (expression-statement)]
    LO_MUL         reduce using rule 4 (statement)
    LO_MUL         [reduce using rule 19 (expression-statement)]
    LO_ADD         reduce using rule 4 (statement)
    LO_ADD         [reduce using rule 19 (expression-statement)]
    LO_SUB         reduce using rule 4 (statement)
    LO_SUB         [reduce using rule 19 (expression-statement)]
    LO_BIT_NOT     reduce using rule 4 (statement)
    LO_BIT_NOT     [reduce using rule 19 (expression-statement)]
    LO_LGC_NOT     reduce using rule 4 (statement)
    LO_LGC_NOT     [reduce using rule 19 (expression-statement)]
    LO_BIT_AND     reduce using rule 4 (statement)
    LO_BIT_AND     [reduce using rule 19 (expression-statement)]
    KW_CONTINUE    reduce using rule 4 (statement)
    KW_CONTINUE    [reduce using rule 19 (expression-statement)]
    KW_BREAK       reduce using rule 4 (statement)
    KW_BREAK       [reduce using rule 19 (expression-statement)]
    KW_IF          reduce using rule 4 (statement)
    KW_IF          [reduce using rule 19 (expression-statement)]
    KW_FOR         reduce using rule 4 (statement)
    KW_FOR         [reduce using rule 19 (expression-statement)]
    KW_STRUCT      reduce using rule 4 (statement)
    KW_STRUCT      [reduce using rule 19 (expression-statement)]
    KW_WHILE       reduce using rule 4 (statement)
    KW_WHILE       [reduce using rule 19 (expression-statement)]
    KW_DO          reduce using rule 4 (statement)
    KW_DO          [reduce using rule 19 (expression-statement)]
    KW_ELSE        reduce using rule 4 (statement)
    KW_ELSE        [reduce using rule 19 (expression-statement)]
    T_SIGNED       reduce using rule 4 (statement)
    T_SIGNED       [reduce using rule 19 (expression-statement)]
    T_UNSIGNED     reduce using rule 4 (statement)
    T_UNSIGNED     [reduce using rule 19 (expression-statement)]
    Q_CONST        reduce using rule 4 (statement)
    Q_CONST        [reduce using rule 19 (expression-statement)]
    SEMICOLON      reduce using rule 4 (statement)
    SEMICOLON      [reduce using rule 19 (expression-statement)]
    KW_UNION       reduce using rule 4 (statement)
    KW_UNION       [reduce using rule 19 (expression-statement)]
    IDENTIFIER     reduce using rule 4 (statement)
    IDENTIFIER     [reduce using rule 19 (expression-statement)]
    INTEGER        reduce using rule 4 (statement)
    INTEGER        [reduce using rule 19 (expression-statement)]
    L_BRACKET      reduce using rule 4 (statement)
    L_BRACKET      [reduce using rule 19 (expression-statement)]
    L_BRACE        reduce using rule 4 (statement)
    L_BRACE        [reduce using rule 19 (expression-statement)]
    R_BRACE        reduce using rule 4 (statement)
    R_BRACE        [reduce using rule 19 (expression-statement)]
    $default       reduce using rule 4 (statement)


State 23

  117 struct-or-union: KW_UNION .

    $default  reduce using rule 117 (struct-or-union)


State 24

  103 primary-expression: IDENTIFIER .

    $default  reduce using rule 103 (primary-expression)


State 25

  106 constant: INTEGER .

    $default  reduce using rule 106 (constant)


State 26

   86 cast-expression: L_BRACKET . type-specifier R_BRACKET cast-expression
  105 primary-expression: L_BRACKET . expression R_BRACKET

    T_CHAR         shift, and go to state 1
    T_INT          shift, and go to state 2
    T_BOOL         shift, and go to state 3
    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    KW_STRUCT      shift, and go to state 16
    T_SIGNED       shift, and go to state 19
    T_UNSIGNED     shift, and go to state 20
    KW_UNION       shift, and go to state 23
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    expression                 go to state 70
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57
    type-specifier             go to state 71
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60


State 27

   21 compound-statement: L_BRACE . block-item-list R_BRACE
   22                   | L_BRACE . R_BRACE

    T_CHAR         shift, and go to state 1
    T_INT          shift, and go to state 2
    T_BOOL         shift, and go to state 3
    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    KW_CONTINUE    shift, and go to state 12
    KW_BREAK       shift, and go to state 13
    KW_IF          shift, and go to state 14
    KW_FOR         shift, and go to state 15
    KW_STRUCT      shift, and go to state 16
    KW_WHILE       shift, and go to state 17
    KW_DO          shift, and go to state 18
    T_SIGNED       shift, and go to state 19
    T_UNSIGNED     shift, and go to state 20
    Q_CONST        shift, and go to state 21
    SEMICOLON      shift, and go to state 22
    KW_UNION       shift, and go to state 23
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26
    L_BRACE        shift, and go to state 27
    R_BRACE        shift, and go to state 72

    T_CHAR         [reduce using rule 33 (type-qualifier)]
    T_INT          [reduce using rule 33 (type-qualifier)]
    T_BOOL         [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFINC  [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFDEC  [reduce using rule 33 (type-qualifier)]
    LO_MUL         [reduce using rule 33 (type-qualifier)]
    LO_ADD         [reduce using rule 33 (type-qualifier)]
    LO_SUB         [reduce using rule 33 (type-qualifier)]
    LO_BIT_NOT     [reduce using rule 33 (type-qualifier)]
    LO_LGC_NOT     [reduce using rule 33 (type-qualifier)]
    LO_BIT_AND     [reduce using rule 33 (type-qualifier)]
    KW_CONTINUE    [reduce using rule 33 (type-qualifier)]
    KW_BREAK       [reduce using rule 33 (type-qualifier)]
    KW_IF          [reduce using rule 33 (type-qualifier)]
    KW_FOR         [reduce using rule 33 (type-qualifier)]
    KW_STRUCT      [reduce using rule 33 (type-qualifier)]
    KW_WHILE       [reduce using rule 33 (type-qualifier)]
    KW_DO          [reduce using rule 33 (type-qualifier)]
    T_SIGNED       [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED     [reduce using rule 33 (type-qualifier)]
    Q_CONST        [reduce using rule 33 (type-qualifier)]
    SEMICOLON      [reduce using rule 33 (type-qualifier)]
    KW_UNION       [reduce using rule 33 (type-qualifier)]
    IDENTIFIER     [reduce using rule 33 (type-qualifier)]
    INTEGER        [reduce using rule 33 (type-qualifier)]
    L_BRACKET      [reduce using rule 33 (type-qualifier)]
    L_BRACE        [reduce using rule 33 (type-qualifier)]
    R_BRACE        [reduce using rule 33 (type-qualifier)]

    statement                  go to state 73
    jump-statement             go to state 31
    iteration-statement        go to state 32
    selection-statement        go to state 33
    expression-statement       go to state 34
    compound-statement         go to state 35
    block-item-list            go to state 74
    block-item                 go to state 75
    declaration                go to state 76
    declaration-specifiers     go to state 37
    type-qualifier             go to state 38
    expression                 go to state 39
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57
    type-specifier             go to state 58
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60


State 28

    0 $accept: program . $end

    $end  shift, and go to state 77


State 29

    1 program: statements .
    3 statements: statements . statement

    T_CHAR         shift, and go to state 1
    T_INT          shift, and go to state 2
    T_BOOL         shift, and go to state 3
    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    KW_CONTINUE    shift, and go to state 12
    KW_BREAK       shift, and go to state 13
    KW_IF          shift, and go to state 14
    KW_FOR         shift, and go to state 15
    KW_STRUCT      shift, and go to state 16
    KW_WHILE       shift, and go to state 17
    KW_DO          shift, and go to state 18
    T_SIGNED       shift, and go to state 19
    T_UNSIGNED     shift, and go to state 20
    Q_CONST        shift, and go to state 21
    SEMICOLON      shift, and go to state 22
    KW_UNION       shift, and go to state 23
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26
    L_BRACE        shift, and go to state 27

    $end           reduce using rule 1 (program)
    $end           [reduce using rule 33 (type-qualifier)]
    T_CHAR         [reduce using rule 33 (type-qualifier)]
    T_INT          [reduce using rule 33 (type-qualifier)]
    T_BOOL         [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFINC  [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFDEC  [reduce using rule 33 (type-qualifier)]
    LO_MUL         [reduce using rule 33 (type-qualifier)]
    LO_ADD         [reduce using rule 33 (type-qualifier)]
    LO_SUB         [reduce using rule 33 (type-qualifier)]
    LO_BIT_NOT     [reduce using rule 33 (type-qualifier)]
    LO_LGC_NOT     [reduce using rule 33 (type-qualifier)]
    LO_BIT_AND     [reduce using rule 33 (type-qualifier)]
    KW_CONTINUE    [reduce using rule 33 (type-qualifier)]
    KW_BREAK       [reduce using rule 33 (type-qualifier)]
    KW_IF          [reduce using rule 33 (type-qualifier)]
    KW_FOR         [reduce using rule 33 (type-qualifier)]
    KW_STRUCT      [reduce using rule 33 (type-qualifier)]
    KW_WHILE       [reduce using rule 33 (type-qualifier)]
    KW_DO          [reduce using rule 33 (type-qualifier)]
    T_SIGNED       [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED     [reduce using rule 33 (type-qualifier)]
    Q_CONST        [reduce using rule 33 (type-qualifier)]
    SEMICOLON      [reduce using rule 33 (type-qualifier)]
    KW_UNION       [reduce using rule 33 (type-qualifier)]
    IDENTIFIER     [reduce using rule 33 (type-qualifier)]
    INTEGER        [reduce using rule 33 (type-qualifier)]
    L_BRACKET      [reduce using rule 33 (type-qualifier)]
    L_BRACE        [reduce using rule 33 (type-qualifier)]
    $default       reduce using rule 1 (program)

    statement                  go to state 78
    jump-statement             go to state 31
    iteration-statement        go to state 32
    selection-statement        go to state 33
    expression-statement       go to state 34
    compound-statement         go to state 35
    declaration                go to state 36
    declaration-specifiers     go to state 37
    type-qualifier             go to state 38
    expression                 go to state 39
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57
    type-specifier             go to state 58
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60


State 30

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 31

   10 statement: jump-statement .

    $default  reduce using rule 10 (statement)


State 32

    9 statement: iteration-statement .

    $default  reduce using rule 9 (statement)


State 33

    8 statement: selection-statement .

    $default  reduce using rule 8 (statement)


State 34

    7 statement: expression-statement .

    $default  reduce using rule 7 (statement)


State 35

    6 statement: compound-statement .

    $default  reduce using rule 6 (statement)


State 36

    5 statement: declaration .

    $default  reduce using rule 5 (statement)


State 37

   27 declaration: declaration-specifiers . init-declarator-list SEMICOLON
   28            | declaration-specifiers .

    LO_MUL      shift, and go to state 79
    IDENTIFIER  shift, and go to state 80

    LO_MUL      [reduce using rule 28 (declaration)]
    IDENTIFIER  [reduce using rule 28 (declaration)]
    $default    reduce using rule 28 (declaration)

    init-declarator-list  go to state 81
    init-declarator       go to state 82
    declarator            go to state 83
    direct-declarator     go to state 84
    pointer               go to state 85


State 38

   31 declaration-specifiers: type-qualifier .
   32                       | type-qualifier . declaration-specifiers

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    KW_STRUCT   shift, and go to state 16
    T_SIGNED    shift, and go to state 19
    T_UNSIGNED  shift, and go to state 20
    Q_CONST     shift, and go to state 21
    KW_UNION    shift, and go to state 23

    $end           reduce using rule 31 (declaration-specifiers)
    $end           [reduce using rule 33 (type-qualifier)]
    T_CHAR         [reduce using rule 31 (declaration-specifiers)]
    T_CHAR         [reduce using rule 33 (type-qualifier)]
    T_INT          [reduce using rule 31 (declaration-specifiers)]
    T_INT          [reduce using rule 33 (type-qualifier)]
    T_BOOL         [reduce using rule 31 (declaration-specifiers)]
    T_BOOL         [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFINC  reduce using rule 31 (declaration-specifiers)
    LO_AS_SELFINC  [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFDEC  reduce using rule 31 (declaration-specifiers)
    LO_AS_SELFDEC  [reduce using rule 33 (type-qualifier)]
    LO_MUL         reduce using rule 31 (declaration-specifiers)
    LO_MUL         [reduce using rule 33 (type-qualifier)]
    LO_ADD         reduce using rule 31 (declaration-specifiers)
    LO_ADD         [reduce using rule 33 (type-qualifier)]
    LO_SUB         reduce using rule 31 (declaration-specifiers)
    LO_SUB         [reduce using rule 33 (type-qualifier)]
    LO_BIT_NOT     reduce using rule 31 (declaration-specifiers)
    LO_BIT_NOT     [reduce using rule 33 (type-qualifier)]
    LO_LGC_NOT     reduce using rule 31 (declaration-specifiers)
    LO_LGC_NOT     [reduce using rule 33 (type-qualifier)]
    LO_BIT_AND     reduce using rule 31 (declaration-specifiers)
    LO_BIT_AND     [reduce using rule 33 (type-qualifier)]
    KW_CONTINUE    reduce using rule 31 (declaration-specifiers)
    KW_CONTINUE    [reduce using rule 33 (type-qualifier)]
    KW_BREAK       reduce using rule 31 (declaration-specifiers)
    KW_BREAK       [reduce using rule 33 (type-qualifier)]
    KW_IF          reduce using rule 31 (declaration-specifiers)
    KW_IF          [reduce using rule 33 (type-qualifier)]
    KW_FOR         reduce using rule 31 (declaration-specifiers)
    KW_FOR         [reduce using rule 33 (type-qualifier)]
    KW_STRUCT      [reduce using rule 31 (declaration-specifiers)]
    KW_STRUCT      [reduce using rule 33 (type-qualifier)]
    KW_WHILE       reduce using rule 31 (declaration-specifiers)
    KW_WHILE       [reduce using rule 33 (type-qualifier)]
    KW_DO          reduce using rule 31 (declaration-specifiers)
    KW_DO          [reduce using rule 33 (type-qualifier)]
    KW_ELSE        reduce using rule 31 (declaration-specifiers)
    KW_ELSE        [reduce using rule 33 (type-qualifier)]
    T_SIGNED       [reduce using rule 31 (declaration-specifiers)]
    T_SIGNED       [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED     [reduce using rule 31 (declaration-specifiers)]
    T_UNSIGNED     [reduce using rule 33 (type-qualifier)]
    Q_CONST        [reduce using rule 31 (declaration-specifiers)]
    Q_CONST        [reduce using rule 33 (type-qualifier)]
    SEMICOLON      reduce using rule 31 (declaration-specifiers)
    SEMICOLON      [reduce using rule 33 (type-qualifier)]
    KW_UNION       [reduce using rule 31 (declaration-specifiers)]
    KW_UNION       [reduce using rule 33 (type-qualifier)]
    IDENTIFIER     reduce using rule 31 (declaration-specifiers)
    IDENTIFIER     [reduce using rule 33 (type-qualifier)]
    INTEGER        reduce using rule 31 (declaration-specifiers)
    INTEGER        [reduce using rule 33 (type-qualifier)]
    L_BRACKET      reduce using rule 31 (declaration-specifiers)
    L_BRACKET      [reduce using rule 33 (type-qualifier)]
    L_BRACE        reduce using rule 31 (declaration-specifiers)
    L_BRACE        [reduce using rule 33 (type-qualifier)]
    R_BRACE        reduce using rule 31 (declaration-specifiers)
    R_BRACE        [reduce using rule 33 (type-qualifier)]
    $default       reduce using rule 31 (declaration-specifiers)

    declaration-specifiers     go to state 86
    type-qualifier             go to state 38
    type-specifier             go to state 58
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60


State 39

   20 expression-statement: expression . SEMICOLON
   43 expression: expression . LO_COMMA assignment-expression

    LO_COMMA   shift, and go to state 87
    SEMICOLON  shift, and go to state 88


State 40

   42 expression: assignment-expression .

    $default  reduce using rule 42 (expression)


State 41

   53 assignment-expression: conditional-expression .

    $default  reduce using rule 53 (assignment-expression)


State 42

   55 conditional-expression: logical-OR-expression .
   56                       | logical-OR-expression . RO_TRI_QUES expression RO_TRI_COLON conditional-expression
   58 logical-OR-expression: logical-OR-expression . LO_LGC_OR logical-AND-expression

    RO_TRI_QUES  shift, and go to state 89
    LO_LGC_OR    shift, and go to state 90

    $default  reduce using rule 55 (conditional-expression)


State 43

   57 logical-OR-expression: logical-AND-expression .
   60 logical-AND-expression: logical-AND-expression . LO_LGC_AND inclusive-OR-expression

    LO_LGC_AND  shift, and go to state 91

    $default  reduce using rule 57 (logical-OR-expression)


State 44

   59 logical-AND-expression: inclusive-OR-expression .
   62 inclusive-OR-expression: inclusive-OR-expression . LO_BIT_OR exclusive-OR-expression

    LO_BIT_OR  shift, and go to state 92

    $default  reduce using rule 59 (logical-AND-expression)


State 45

   61 inclusive-OR-expression: exclusive-OR-expression .
   64 exclusive-OR-expression: exclusive-OR-expression . LO_BIT_XOR AND-expression

    LO_BIT_XOR  shift, and go to state 93

    $default  reduce using rule 61 (inclusive-OR-expression)


State 46

   63 exclusive-OR-expression: AND-expression .
   66 AND-expression: AND-expression . LO_BIT_AND equality-expression

    LO_BIT_AND  shift, and go to state 94

    $default  reduce using rule 63 (exclusive-OR-expression)


State 47

   65 AND-expression: equality-expression .
   68 equality-expression: equality-expression . LO_EQ relational-expression
   69                    | equality-expression . LO_N_EQ relational-expression

    LO_EQ    shift, and go to state 95
    LO_N_EQ  shift, and go to state 96

    $default  reduce using rule 65 (AND-expression)


State 48

   67 equality-expression: relational-expression .
   71 relational-expression: relational-expression . LO_REL_L shift-expression
   72                      | relational-expression . LO_REL_G shift-expression
   73                      | relational-expression . LO_REL_LE shift-expression
   74                      | relational-expression . LO_REL_GE shift-expression

    LO_REL_L   shift, and go to state 97
    LO_REL_G   shift, and go to state 98
    LO_REL_LE  shift, and go to state 99
    LO_REL_GE  shift, and go to state 100

    $default  reduce using rule 67 (equality-expression)


State 49

   70 relational-expression: shift-expression .
   76 shift-expression: shift-expression . LO_SFT_L additive-expression
   77                 | shift-expression . LO_SFT_R additive-expression

    LO_SFT_L  shift, and go to state 101
    LO_SFT_R  shift, and go to state 102

    $default  reduce using rule 70 (relational-expression)


State 50

   75 shift-expression: additive-expression .
   79 additive-expression: additive-expression . LO_ADD multiplicative-expression
   80                    | additive-expression . LO_SUB multiplicative-expression

    LO_ADD  shift, and go to state 103
    LO_SUB  shift, and go to state 104

    $default  reduce using rule 75 (shift-expression)


State 51

   78 additive-expression: multiplicative-expression .
   82 multiplicative-expression: multiplicative-expression . LO_MUL cast-expression
   83                          | multiplicative-expression . LO_DIV cast-expression
   84                          | multiplicative-expression . LO_MOD cast-expression

    LO_MUL  shift, and go to state 105
    LO_DIV  shift, and go to state 106
    LO_MOD  shift, and go to state 107

    $default  reduce using rule 78 (additive-expression)


State 52

   81 multiplicative-expression: cast-expression .

    $default  reduce using rule 81 (multiplicative-expression)


State 53

   96 unary-expression: unary-operator . cast-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    cast-expression     go to state 108
    unary-operator      go to state 53
    unary-expression    go to state 109
    postfix-expression  go to state 55
    primary-expression  go to state 56
    constant            go to state 57


State 54

   54 assignment-expression: unary-expression . assignment-operator assignment-expression
   85 cast-expression: unary-expression .

    RO_AS_ADDEQ    shift, and go to state 110
    RO_AS_SUBEQ    shift, and go to state 111
    RO_AS_MULEQ    shift, and go to state 112
    RO_AS_DIVEQ    shift, and go to state 113
    RO_AS_SFTL_EQ  shift, and go to state 114
    RO_AS_SFTR_EQ  shift, and go to state 115
    RO_AS_ANDEQ    shift, and go to state 116
    RO_AS_OREQ     shift, and go to state 117
    RO_ASSIGN      shift, and go to state 118

    $default  reduce using rule 85 (cast-expression)

    assignment-operator  go to state 119


State 55

   93 unary-expression: postfix-expression .
   98 postfix-expression: postfix-expression . L_SQ_BRACKET expression R_SQ_BRACKET
   99                   | postfix-expression . LO_MEMBER IDENTIFIER
  100                   | postfix-expression . LO_PT_MEMBER IDENTIFIER
  101                   | postfix-expression . LO_AS_SELFINC
  102                   | postfix-expression . LO_AS_SELFDEC

    LO_AS_SELFINC  shift, and go to state 120
    LO_AS_SELFDEC  shift, and go to state 121
    LO_MEMBER      shift, and go to state 122
    LO_PT_MEMBER   shift, and go to state 123
    L_SQ_BRACKET   shift, and go to state 124

    $default  reduce using rule 93 (unary-expression)


State 56

   97 postfix-expression: primary-expression .

    $default  reduce using rule 97 (postfix-expression)


State 57

  104 primary-expression: constant .

    $default  reduce using rule 104 (primary-expression)


State 58

   29 declaration-specifiers: type-specifier .
   30                       | type-specifier . declaration-specifiers

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    KW_STRUCT   shift, and go to state 16
    T_SIGNED    shift, and go to state 19
    T_UNSIGNED  shift, and go to state 20
    Q_CONST     shift, and go to state 21
    KW_UNION    shift, and go to state 23

    $end           reduce using rule 29 (declaration-specifiers)
    $end           [reduce using rule 33 (type-qualifier)]
    T_CHAR         [reduce using rule 29 (declaration-specifiers)]
    T_CHAR         [reduce using rule 33 (type-qualifier)]
    T_INT          [reduce using rule 29 (declaration-specifiers)]
    T_INT          [reduce using rule 33 (type-qualifier)]
    T_BOOL         [reduce using rule 29 (declaration-specifiers)]
    T_BOOL         [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFINC  reduce using rule 29 (declaration-specifiers)
    LO_AS_SELFINC  [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFDEC  reduce using rule 29 (declaration-specifiers)
    LO_AS_SELFDEC  [reduce using rule 33 (type-qualifier)]
    LO_MUL         reduce using rule 29 (declaration-specifiers)
    LO_MUL         [reduce using rule 33 (type-qualifier)]
    LO_ADD         reduce using rule 29 (declaration-specifiers)
    LO_ADD         [reduce using rule 33 (type-qualifier)]
    LO_SUB         reduce using rule 29 (declaration-specifiers)
    LO_SUB         [reduce using rule 33 (type-qualifier)]
    LO_BIT_NOT     reduce using rule 29 (declaration-specifiers)
    LO_BIT_NOT     [reduce using rule 33 (type-qualifier)]
    LO_LGC_NOT     reduce using rule 29 (declaration-specifiers)
    LO_LGC_NOT     [reduce using rule 33 (type-qualifier)]
    LO_BIT_AND     reduce using rule 29 (declaration-specifiers)
    LO_BIT_AND     [reduce using rule 33 (type-qualifier)]
    KW_CONTINUE    reduce using rule 29 (declaration-specifiers)
    KW_CONTINUE    [reduce using rule 33 (type-qualifier)]
    KW_BREAK       reduce using rule 29 (declaration-specifiers)
    KW_BREAK       [reduce using rule 33 (type-qualifier)]
    KW_IF          reduce using rule 29 (declaration-specifiers)
    KW_IF          [reduce using rule 33 (type-qualifier)]
    KW_FOR         reduce using rule 29 (declaration-specifiers)
    KW_FOR         [reduce using rule 33 (type-qualifier)]
    KW_STRUCT      [reduce using rule 29 (declaration-specifiers)]
    KW_STRUCT      [reduce using rule 33 (type-qualifier)]
    KW_WHILE       reduce using rule 29 (declaration-specifiers)
    KW_WHILE       [reduce using rule 33 (type-qualifier)]
    KW_DO          reduce using rule 29 (declaration-specifiers)
    KW_DO          [reduce using rule 33 (type-qualifier)]
    KW_ELSE        reduce using rule 29 (declaration-specifiers)
    KW_ELSE        [reduce using rule 33 (type-qualifier)]
    T_SIGNED       [reduce using rule 29 (declaration-specifiers)]
    T_SIGNED       [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED     [reduce using rule 29 (declaration-specifiers)]
    T_UNSIGNED     [reduce using rule 33 (type-qualifier)]
    Q_CONST        [reduce using rule 29 (declaration-specifiers)]
    Q_CONST        [reduce using rule 33 (type-qualifier)]
    SEMICOLON      reduce using rule 29 (declaration-specifiers)
    SEMICOLON      [reduce using rule 33 (type-qualifier)]
    KW_UNION       [reduce using rule 29 (declaration-specifiers)]
    KW_UNION       [reduce using rule 33 (type-qualifier)]
    IDENTIFIER     reduce using rule 29 (declaration-specifiers)
    IDENTIFIER     [reduce using rule 33 (type-qualifier)]
    INTEGER        reduce using rule 29 (declaration-specifiers)
    INTEGER        [reduce using rule 33 (type-qualifier)]
    L_BRACKET      reduce using rule 29 (declaration-specifiers)
    L_BRACKET      [reduce using rule 33 (type-qualifier)]
    L_BRACE        reduce using rule 29 (declaration-specifiers)
    L_BRACE        [reduce using rule 33 (type-qualifier)]
    R_BRACE        reduce using rule 29 (declaration-specifiers)
    R_BRACE        [reduce using rule 33 (type-qualifier)]
    $default       reduce using rule 29 (declaration-specifiers)

    declaration-specifiers     go to state 125
    type-qualifier             go to state 38
    type-specifier             go to state 58
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60


State 59

  112 type-specifier: struct-or-union-specifier .

    $default  reduce using rule 112 (type-specifier)


State 60

  113 struct-or-union-specifier: struct-or-union . IDENTIFIER L_BRACE struct-declaration-list R_BRACE
  114                          | struct-or-union . L_BRACE struct-declaration-list R_BRACE
  115                          | struct-or-union . IDENTIFIER

    IDENTIFIER  shift, and go to state 126
    L_BRACE     shift, and go to state 127


State 61

  105 primary-expression: L_BRACKET . expression R_BRACKET

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    expression                 go to state 70
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 62

   94 unary-expression: LO_AS_SELFINC unary-expression .

    $default  reduce using rule 94 (unary-expression)


State 63

   95 unary-expression: LO_AS_SELFDEC unary-expression .

    $default  reduce using rule 95 (unary-expression)


State 64

   12 jump-statement: KW_CONTINUE SEMICOLON .

    $default  reduce using rule 12 (jump-statement)


State 65

   11 jump-statement: KW_BREAK SEMICOLON .

    $default  reduce using rule 11 (jump-statement)


State 66

   17 selection-statement: KW_IF L_BRACKET . expression R_BRACKET statement
   18                    | KW_IF L_BRACKET . expression R_BRACKET statement KW_ELSE statement

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    expression                 go to state 128
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 67

   15 iteration-statement: KW_FOR L_BRACKET . SEMICOLON SEMICOLON R_BRACKET
   16                    | KW_FOR L_BRACKET . expression SEMICOLON expression SEMICOLON expression R_BRACKET

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    SEMICOLON      shift, and go to state 129
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    expression                 go to state 130
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 68

   13 iteration-statement: KW_WHILE L_BRACKET . expression R_BRACKET statement

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    expression                 go to state 131
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 69

   14 iteration-statement: KW_DO statement . KW_WHILE L_BRACKET expression R_BRACKET

    KW_WHILE  shift, and go to state 132


State 70

   43 expression: expression . LO_COMMA assignment-expression
  105 primary-expression: L_BRACKET expression . R_BRACKET

    LO_COMMA   shift, and go to state 87
    R_BRACKET  shift, and go to state 133


State 71

   86 cast-expression: L_BRACKET type-specifier . R_BRACKET cast-expression

    R_BRACKET  shift, and go to state 134


State 72

   22 compound-statement: L_BRACE R_BRACE .

    $default  reduce using rule 22 (compound-statement)


State 73

   26 block-item: statement .

    $default  reduce using rule 26 (block-item)


State 74

   21 compound-statement: L_BRACE block-item-list . R_BRACE
   24 block-item-list: block-item-list . block-item

    T_CHAR         shift, and go to state 1
    T_INT          shift, and go to state 2
    T_BOOL         shift, and go to state 3
    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    KW_CONTINUE    shift, and go to state 12
    KW_BREAK       shift, and go to state 13
    KW_IF          shift, and go to state 14
    KW_FOR         shift, and go to state 15
    KW_STRUCT      shift, and go to state 16
    KW_WHILE       shift, and go to state 17
    KW_DO          shift, and go to state 18
    T_SIGNED       shift, and go to state 19
    T_UNSIGNED     shift, and go to state 20
    Q_CONST        shift, and go to state 21
    SEMICOLON      shift, and go to state 22
    KW_UNION       shift, and go to state 23
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26
    L_BRACE        shift, and go to state 27
    R_BRACE        shift, and go to state 135

    T_CHAR         [reduce using rule 33 (type-qualifier)]
    T_INT          [reduce using rule 33 (type-qualifier)]
    T_BOOL         [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFINC  [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFDEC  [reduce using rule 33 (type-qualifier)]
    LO_MUL         [reduce using rule 33 (type-qualifier)]
    LO_ADD         [reduce using rule 33 (type-qualifier)]
    LO_SUB         [reduce using rule 33 (type-qualifier)]
    LO_BIT_NOT     [reduce using rule 33 (type-qualifier)]
    LO_LGC_NOT     [reduce using rule 33 (type-qualifier)]
    LO_BIT_AND     [reduce using rule 33 (type-qualifier)]
    KW_CONTINUE    [reduce using rule 33 (type-qualifier)]
    KW_BREAK       [reduce using rule 33 (type-qualifier)]
    KW_IF          [reduce using rule 33 (type-qualifier)]
    KW_FOR         [reduce using rule 33 (type-qualifier)]
    KW_STRUCT      [reduce using rule 33 (type-qualifier)]
    KW_WHILE       [reduce using rule 33 (type-qualifier)]
    KW_DO          [reduce using rule 33 (type-qualifier)]
    T_SIGNED       [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED     [reduce using rule 33 (type-qualifier)]
    Q_CONST        [reduce using rule 33 (type-qualifier)]
    SEMICOLON      [reduce using rule 33 (type-qualifier)]
    KW_UNION       [reduce using rule 33 (type-qualifier)]
    IDENTIFIER     [reduce using rule 33 (type-qualifier)]
    INTEGER        [reduce using rule 33 (type-qualifier)]
    L_BRACKET      [reduce using rule 33 (type-qualifier)]
    L_BRACE        [reduce using rule 33 (type-qualifier)]
    R_BRACE        [reduce using rule 33 (type-qualifier)]

    statement                  go to state 73
    jump-statement             go to state 31
    iteration-statement        go to state 32
    selection-statement        go to state 33
    expression-statement       go to state 34
    compound-statement         go to state 35
    block-item                 go to state 136
    declaration                go to state 76
    declaration-specifiers     go to state 37
    type-qualifier             go to state 38
    expression                 go to state 39
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57
    type-specifier             go to state 58
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60


State 75

   23 block-item-list: block-item .

    $default  reduce using rule 23 (block-item-list)


State 76

    5 statement: declaration .
   25 block-item: declaration .

    T_CHAR         reduce using rule 5 (statement)
    T_CHAR         [reduce using rule 25 (block-item)]
    T_INT          reduce using rule 5 (statement)
    T_INT          [reduce using rule 25 (block-item)]
    T_BOOL         reduce using rule 5 (statement)
    T_BOOL         [reduce using rule 25 (block-item)]
    LO_AS_SELFINC  reduce using rule 5 (statement)
    LO_AS_SELFINC  [reduce using rule 25 (block-item)]
    LO_AS_SELFDEC  reduce using rule 5 (statement)
    LO_AS_SELFDEC  [reduce using rule 25 (block-item)]
    LO_MUL         reduce using rule 5 (statement)
    LO_MUL         [reduce using rule 25 (block-item)]
    LO_ADD         reduce using rule 5 (statement)
    LO_ADD         [reduce using rule 25 (block-item)]
    LO_SUB         reduce using rule 5 (statement)
    LO_SUB         [reduce using rule 25 (block-item)]
    LO_BIT_NOT     reduce using rule 5 (statement)
    LO_BIT_NOT     [reduce using rule 25 (block-item)]
    LO_LGC_NOT     reduce using rule 5 (statement)
    LO_LGC_NOT     [reduce using rule 25 (block-item)]
    LO_BIT_AND     reduce using rule 5 (statement)
    LO_BIT_AND     [reduce using rule 25 (block-item)]
    KW_CONTINUE    reduce using rule 5 (statement)
    KW_CONTINUE    [reduce using rule 25 (block-item)]
    KW_BREAK       reduce using rule 5 (statement)
    KW_BREAK       [reduce using rule 25 (block-item)]
    KW_IF          reduce using rule 5 (statement)
    KW_IF          [reduce using rule 25 (block-item)]
    KW_FOR         reduce using rule 5 (statement)
    KW_FOR         [reduce using rule 25 (block-item)]
    KW_STRUCT      reduce using rule 5 (statement)
    KW_STRUCT      [reduce using rule 25 (block-item)]
    KW_WHILE       reduce using rule 5 (statement)
    KW_WHILE       [reduce using rule 25 (block-item)]
    KW_DO          reduce using rule 5 (statement)
    KW_DO          [reduce using rule 25 (block-item)]
    T_SIGNED       reduce using rule 5 (statement)
    T_SIGNED       [reduce using rule 25 (block-item)]
    T_UNSIGNED     reduce using rule 5 (statement)
    T_UNSIGNED     [reduce using rule 25 (block-item)]
    Q_CONST        reduce using rule 5 (statement)
    Q_CONST        [reduce using rule 25 (block-item)]
    SEMICOLON      reduce using rule 5 (statement)
    SEMICOLON      [reduce using rule 25 (block-item)]
    KW_UNION       reduce using rule 5 (statement)
    KW_UNION       [reduce using rule 25 (block-item)]
    IDENTIFIER     reduce using rule 5 (statement)
    IDENTIFIER     [reduce using rule 25 (block-item)]
    INTEGER        reduce using rule 5 (statement)
    INTEGER        [reduce using rule 25 (block-item)]
    L_BRACKET      reduce using rule 5 (statement)
    L_BRACKET      [reduce using rule 25 (block-item)]
    L_BRACE        reduce using rule 5 (statement)
    L_BRACE        [reduce using rule 25 (block-item)]
    R_BRACE        reduce using rule 5 (statement)
    R_BRACE        [reduce using rule 25 (block-item)]
    $default       reduce using rule 5 (statement)


State 77

    0 $accept: program $end .

    $default  accept


State 78

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 79

  133 pointer: LO_MUL .
  134        | LO_MUL . pointer

    LO_MUL  shift, and go to state 79

    $default  reduce using rule 133 (pointer)

    pointer  go to state 137


State 80

  131 direct-declarator: IDENTIFIER .

    $default  reduce using rule 131 (direct-declarator)


State 81

   27 declaration: declaration-specifiers init-declarator-list . SEMICOLON
   35 init-declarator-list: init-declarator-list . LO_COMMA init-declarator

    LO_COMMA   shift, and go to state 138
    SEMICOLON  shift, and go to state 139


State 82

   34 init-declarator-list: init-declarator .

    $default  reduce using rule 34 (init-declarator-list)


State 83

   36 init-declarator: declarator .
   37                | declarator . RO_ASSIGN initializer

    RO_ASSIGN  shift, and go to state 140

    $default  reduce using rule 36 (init-declarator)


State 84

  130 declarator: direct-declarator .
  132 direct-declarator: direct-declarator . L_SQ_BRACKET assignment-expression R_SQ_BRACKET

    L_SQ_BRACKET  shift, and go to state 141

    $default  reduce using rule 130 (declarator)


State 85

  129 declarator: pointer . direct-declarator

    IDENTIFIER  shift, and go to state 80

    direct-declarator  go to state 142


State 86

   32 declaration-specifiers: type-qualifier declaration-specifiers .

    $default  reduce using rule 32 (declaration-specifiers)


State 87

   43 expression: expression LO_COMMA . assignment-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    assignment-expression      go to state 143
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 88

   20 expression-statement: expression SEMICOLON .

    $default  reduce using rule 20 (expression-statement)


State 89

   56 conditional-expression: logical-OR-expression RO_TRI_QUES . expression RO_TRI_COLON conditional-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    expression                 go to state 144
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 90

   58 logical-OR-expression: logical-OR-expression LO_LGC_OR . logical-AND-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    logical-AND-expression     go to state 145
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 91

   60 logical-AND-expression: logical-AND-expression LO_LGC_AND . inclusive-OR-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    inclusive-OR-expression    go to state 146
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 92

   62 inclusive-OR-expression: inclusive-OR-expression LO_BIT_OR . exclusive-OR-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    exclusive-OR-expression    go to state 147
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 93

   64 exclusive-OR-expression: exclusive-OR-expression LO_BIT_XOR . AND-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    AND-expression             go to state 148
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 94

   66 AND-expression: AND-expression LO_BIT_AND . equality-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    equality-expression        go to state 149
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 95

   68 equality-expression: equality-expression LO_EQ . relational-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    relational-expression      go to state 150
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 96

   69 equality-expression: equality-expression LO_N_EQ . relational-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    relational-expression      go to state 151
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 97

   71 relational-expression: relational-expression LO_REL_L . shift-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    shift-expression           go to state 152
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 98

   72 relational-expression: relational-expression LO_REL_G . shift-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    shift-expression           go to state 153
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 99

   73 relational-expression: relational-expression LO_REL_LE . shift-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    shift-expression           go to state 154
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 100

   74 relational-expression: relational-expression LO_REL_GE . shift-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    shift-expression           go to state 155
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 101

   76 shift-expression: shift-expression LO_SFT_L . additive-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    additive-expression        go to state 156
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 102

   77 shift-expression: shift-expression LO_SFT_R . additive-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    additive-expression        go to state 157
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 103

   79 additive-expression: additive-expression LO_ADD . multiplicative-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    multiplicative-expression  go to state 158
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 104

   80 additive-expression: additive-expression LO_SUB . multiplicative-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    multiplicative-expression  go to state 159
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 105

   82 multiplicative-expression: multiplicative-expression LO_MUL . cast-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    cast-expression     go to state 160
    unary-operator      go to state 53
    unary-expression    go to state 109
    postfix-expression  go to state 55
    primary-expression  go to state 56
    constant            go to state 57


State 106

   83 multiplicative-expression: multiplicative-expression LO_DIV . cast-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    cast-expression     go to state 161
    unary-operator      go to state 53
    unary-expression    go to state 109
    postfix-expression  go to state 55
    primary-expression  go to state 56
    constant            go to state 57


State 107

   84 multiplicative-expression: multiplicative-expression LO_MOD . cast-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    cast-expression     go to state 162
    unary-operator      go to state 53
    unary-expression    go to state 109
    postfix-expression  go to state 55
    primary-expression  go to state 56
    constant            go to state 57


State 108

   96 unary-expression: unary-operator cast-expression .

    $default  reduce using rule 96 (unary-expression)


State 109

   85 cast-expression: unary-expression .

    $default  reduce using rule 85 (cast-expression)


State 110

   45 assignment-operator: RO_AS_ADDEQ .

    $default  reduce using rule 45 (assignment-operator)


State 111

   52 assignment-operator: RO_AS_SUBEQ .

    $default  reduce using rule 52 (assignment-operator)


State 112

   48 assignment-operator: RO_AS_MULEQ .

    $default  reduce using rule 48 (assignment-operator)


State 113

   47 assignment-operator: RO_AS_DIVEQ .

    $default  reduce using rule 47 (assignment-operator)


State 114

   50 assignment-operator: RO_AS_SFTL_EQ .

    $default  reduce using rule 50 (assignment-operator)


State 115

   51 assignment-operator: RO_AS_SFTR_EQ .

    $default  reduce using rule 51 (assignment-operator)


State 116

   46 assignment-operator: RO_AS_ANDEQ .

    $default  reduce using rule 46 (assignment-operator)


State 117

   49 assignment-operator: RO_AS_OREQ .

    $default  reduce using rule 49 (assignment-operator)


State 118

   44 assignment-operator: RO_ASSIGN .

    $default  reduce using rule 44 (assignment-operator)


State 119

   54 assignment-expression: unary-expression assignment-operator . assignment-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    assignment-expression      go to state 163
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 120

  101 postfix-expression: postfix-expression LO_AS_SELFINC .

    $default  reduce using rule 101 (postfix-expression)


State 121

  102 postfix-expression: postfix-expression LO_AS_SELFDEC .

    $default  reduce using rule 102 (postfix-expression)


State 122

   99 postfix-expression: postfix-expression LO_MEMBER . IDENTIFIER

    IDENTIFIER  shift, and go to state 164


State 123

  100 postfix-expression: postfix-expression LO_PT_MEMBER . IDENTIFIER

    IDENTIFIER  shift, and go to state 165


State 124

   98 postfix-expression: postfix-expression L_SQ_BRACKET . expression R_SQ_BRACKET

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    expression                 go to state 166
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 125

   30 declaration-specifiers: type-specifier declaration-specifiers .

    $default  reduce using rule 30 (declaration-specifiers)


State 126

  113 struct-or-union-specifier: struct-or-union IDENTIFIER . L_BRACE struct-declaration-list R_BRACE
  115                          | struct-or-union IDENTIFIER .

    L_BRACE  shift, and go to state 167

    L_BRACE   [reduce using rule 115 (struct-or-union-specifier)]
    $default  reduce using rule 115 (struct-or-union-specifier)


State 127

  114 struct-or-union-specifier: struct-or-union L_BRACE . struct-declaration-list R_BRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    KW_STRUCT   shift, and go to state 16
    T_SIGNED    shift, and go to state 19
    T_UNSIGNED  shift, and go to state 20
    Q_CONST     shift, and go to state 21
    KW_UNION    shift, and go to state 23

    T_CHAR      [reduce using rule 33 (type-qualifier)]
    T_INT       [reduce using rule 33 (type-qualifier)]
    T_BOOL      [reduce using rule 33 (type-qualifier)]
    KW_STRUCT   [reduce using rule 33 (type-qualifier)]
    T_SIGNED    [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED  [reduce using rule 33 (type-qualifier)]
    Q_CONST     [reduce using rule 33 (type-qualifier)]
    KW_UNION    [reduce using rule 33 (type-qualifier)]
    $default    reduce using rule 33 (type-qualifier)

    type-qualifier             go to state 168
    type-specifier             go to state 169
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60
    struct-declaration-list    go to state 170
    struct-declaration         go to state 171
    specifier-qualifier-list   go to state 172


State 128

   17 selection-statement: KW_IF L_BRACKET expression . R_BRACKET statement
   18                    | KW_IF L_BRACKET expression . R_BRACKET statement KW_ELSE statement
   43 expression: expression . LO_COMMA assignment-expression

    LO_COMMA   shift, and go to state 87
    R_BRACKET  shift, and go to state 173


State 129

   15 iteration-statement: KW_FOR L_BRACKET SEMICOLON . SEMICOLON R_BRACKET

    SEMICOLON  shift, and go to state 174


State 130

   16 iteration-statement: KW_FOR L_BRACKET expression . SEMICOLON expression SEMICOLON expression R_BRACKET
   43 expression: expression . LO_COMMA assignment-expression

    LO_COMMA   shift, and go to state 87
    SEMICOLON  shift, and go to state 175


State 131

   13 iteration-statement: KW_WHILE L_BRACKET expression . R_BRACKET statement
   43 expression: expression . LO_COMMA assignment-expression

    LO_COMMA   shift, and go to state 87
    R_BRACKET  shift, and go to state 176


State 132

   14 iteration-statement: KW_DO statement KW_WHILE . L_BRACKET expression R_BRACKET

    L_BRACKET  shift, and go to state 177


State 133

  105 primary-expression: L_BRACKET expression R_BRACKET .

    $default  reduce using rule 105 (primary-expression)


State 134

   86 cast-expression: L_BRACKET type-specifier R_BRACKET . cast-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    cast-expression     go to state 178
    unary-operator      go to state 53
    unary-expression    go to state 109
    postfix-expression  go to state 55
    primary-expression  go to state 56
    constant            go to state 57


State 135

   21 compound-statement: L_BRACE block-item-list R_BRACE .

    $default  reduce using rule 21 (compound-statement)


State 136

   24 block-item-list: block-item-list block-item .

    $default  reduce using rule 24 (block-item-list)


State 137

  134 pointer: LO_MUL pointer .

    $default  reduce using rule 134 (pointer)


State 138

   35 init-declarator-list: init-declarator-list LO_COMMA . init-declarator

    LO_MUL      shift, and go to state 79
    IDENTIFIER  shift, and go to state 80

    init-declarator    go to state 179
    declarator         go to state 83
    direct-declarator  go to state 84
    pointer            go to state 85


State 139

   27 declaration: declaration-specifiers init-declarator-list SEMICOLON .

    $default  reduce using rule 27 (declaration)


State 140

   37 init-declarator: declarator RO_ASSIGN . initializer

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26
    L_BRACE        shift, and go to state 180

    initializer                go to state 181
    assignment-expression      go to state 182
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 141

  132 direct-declarator: direct-declarator L_SQ_BRACKET . assignment-expression R_SQ_BRACKET

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    assignment-expression      go to state 183
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 142

  129 declarator: pointer direct-declarator .
  132 direct-declarator: direct-declarator . L_SQ_BRACKET assignment-expression R_SQ_BRACKET

    L_SQ_BRACKET  shift, and go to state 141

    $default  reduce using rule 129 (declarator)


State 143

   43 expression: expression LO_COMMA assignment-expression .

    $default  reduce using rule 43 (expression)


State 144

   43 expression: expression . LO_COMMA assignment-expression
   56 conditional-expression: logical-OR-expression RO_TRI_QUES expression . RO_TRI_COLON conditional-expression

    RO_TRI_COLON  shift, and go to state 184
    LO_COMMA      shift, and go to state 87


State 145

   58 logical-OR-expression: logical-OR-expression LO_LGC_OR logical-AND-expression .
   60 logical-AND-expression: logical-AND-expression . LO_LGC_AND inclusive-OR-expression

    LO_LGC_AND  shift, and go to state 91

    $default  reduce using rule 58 (logical-OR-expression)


State 146

   60 logical-AND-expression: logical-AND-expression LO_LGC_AND inclusive-OR-expression .
   62 inclusive-OR-expression: inclusive-OR-expression . LO_BIT_OR exclusive-OR-expression

    LO_BIT_OR  shift, and go to state 92

    $default  reduce using rule 60 (logical-AND-expression)


State 147

   62 inclusive-OR-expression: inclusive-OR-expression LO_BIT_OR exclusive-OR-expression .
   64 exclusive-OR-expression: exclusive-OR-expression . LO_BIT_XOR AND-expression

    LO_BIT_XOR  shift, and go to state 93

    $default  reduce using rule 62 (inclusive-OR-expression)


State 148

   64 exclusive-OR-expression: exclusive-OR-expression LO_BIT_XOR AND-expression .
   66 AND-expression: AND-expression . LO_BIT_AND equality-expression

    LO_BIT_AND  shift, and go to state 94

    $default  reduce using rule 64 (exclusive-OR-expression)


State 149

   66 AND-expression: AND-expression LO_BIT_AND equality-expression .
   68 equality-expression: equality-expression . LO_EQ relational-expression
   69                    | equality-expression . LO_N_EQ relational-expression

    LO_EQ    shift, and go to state 95
    LO_N_EQ  shift, and go to state 96

    $default  reduce using rule 66 (AND-expression)


State 150

   68 equality-expression: equality-expression LO_EQ relational-expression .
   71 relational-expression: relational-expression . LO_REL_L shift-expression
   72                      | relational-expression . LO_REL_G shift-expression
   73                      | relational-expression . LO_REL_LE shift-expression
   74                      | relational-expression . LO_REL_GE shift-expression

    LO_REL_L   shift, and go to state 97
    LO_REL_G   shift, and go to state 98
    LO_REL_LE  shift, and go to state 99
    LO_REL_GE  shift, and go to state 100

    $default  reduce using rule 68 (equality-expression)


State 151

   69 equality-expression: equality-expression LO_N_EQ relational-expression .
   71 relational-expression: relational-expression . LO_REL_L shift-expression
   72                      | relational-expression . LO_REL_G shift-expression
   73                      | relational-expression . LO_REL_LE shift-expression
   74                      | relational-expression . LO_REL_GE shift-expression

    LO_REL_L   shift, and go to state 97
    LO_REL_G   shift, and go to state 98
    LO_REL_LE  shift, and go to state 99
    LO_REL_GE  shift, and go to state 100

    $default  reduce using rule 69 (equality-expression)


State 152

   71 relational-expression: relational-expression LO_REL_L shift-expression .
   76 shift-expression: shift-expression . LO_SFT_L additive-expression
   77                 | shift-expression . LO_SFT_R additive-expression

    LO_SFT_L  shift, and go to state 101
    LO_SFT_R  shift, and go to state 102

    $default  reduce using rule 71 (relational-expression)


State 153

   72 relational-expression: relational-expression LO_REL_G shift-expression .
   76 shift-expression: shift-expression . LO_SFT_L additive-expression
   77                 | shift-expression . LO_SFT_R additive-expression

    LO_SFT_L  shift, and go to state 101
    LO_SFT_R  shift, and go to state 102

    $default  reduce using rule 72 (relational-expression)


State 154

   73 relational-expression: relational-expression LO_REL_LE shift-expression .
   76 shift-expression: shift-expression . LO_SFT_L additive-expression
   77                 | shift-expression . LO_SFT_R additive-expression

    LO_SFT_L  shift, and go to state 101
    LO_SFT_R  shift, and go to state 102

    $default  reduce using rule 73 (relational-expression)


State 155

   74 relational-expression: relational-expression LO_REL_GE shift-expression .
   76 shift-expression: shift-expression . LO_SFT_L additive-expression
   77                 | shift-expression . LO_SFT_R additive-expression

    LO_SFT_L  shift, and go to state 101
    LO_SFT_R  shift, and go to state 102

    $default  reduce using rule 74 (relational-expression)


State 156

   76 shift-expression: shift-expression LO_SFT_L additive-expression .
   79 additive-expression: additive-expression . LO_ADD multiplicative-expression
   80                    | additive-expression . LO_SUB multiplicative-expression

    LO_ADD  shift, and go to state 103
    LO_SUB  shift, and go to state 104

    $default  reduce using rule 76 (shift-expression)


State 157

   77 shift-expression: shift-expression LO_SFT_R additive-expression .
   79 additive-expression: additive-expression . LO_ADD multiplicative-expression
   80                    | additive-expression . LO_SUB multiplicative-expression

    LO_ADD  shift, and go to state 103
    LO_SUB  shift, and go to state 104

    $default  reduce using rule 77 (shift-expression)


State 158

   79 additive-expression: additive-expression LO_ADD multiplicative-expression .
   82 multiplicative-expression: multiplicative-expression . LO_MUL cast-expression
   83                          | multiplicative-expression . LO_DIV cast-expression
   84                          | multiplicative-expression . LO_MOD cast-expression

    LO_MUL  shift, and go to state 105
    LO_DIV  shift, and go to state 106
    LO_MOD  shift, and go to state 107

    $default  reduce using rule 79 (additive-expression)


State 159

   80 additive-expression: additive-expression LO_SUB multiplicative-expression .
   82 multiplicative-expression: multiplicative-expression . LO_MUL cast-expression
   83                          | multiplicative-expression . LO_DIV cast-expression
   84                          | multiplicative-expression . LO_MOD cast-expression

    LO_MUL  shift, and go to state 105
    LO_DIV  shift, and go to state 106
    LO_MOD  shift, and go to state 107

    $default  reduce using rule 80 (additive-expression)


State 160

   82 multiplicative-expression: multiplicative-expression LO_MUL cast-expression .

    $default  reduce using rule 82 (multiplicative-expression)


State 161

   83 multiplicative-expression: multiplicative-expression LO_DIV cast-expression .

    $default  reduce using rule 83 (multiplicative-expression)


State 162

   84 multiplicative-expression: multiplicative-expression LO_MOD cast-expression .

    $default  reduce using rule 84 (multiplicative-expression)


State 163

   54 assignment-expression: unary-expression assignment-operator assignment-expression .

    $default  reduce using rule 54 (assignment-expression)


State 164

   99 postfix-expression: postfix-expression LO_MEMBER IDENTIFIER .

    $default  reduce using rule 99 (postfix-expression)


State 165

  100 postfix-expression: postfix-expression LO_PT_MEMBER IDENTIFIER .

    $default  reduce using rule 100 (postfix-expression)


State 166

   43 expression: expression . LO_COMMA assignment-expression
   98 postfix-expression: postfix-expression L_SQ_BRACKET expression . R_SQ_BRACKET

    LO_COMMA      shift, and go to state 87
    R_SQ_BRACKET  shift, and go to state 185


State 167

  113 struct-or-union-specifier: struct-or-union IDENTIFIER L_BRACE . struct-declaration-list R_BRACE

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    KW_STRUCT   shift, and go to state 16
    T_SIGNED    shift, and go to state 19
    T_UNSIGNED  shift, and go to state 20
    Q_CONST     shift, and go to state 21
    KW_UNION    shift, and go to state 23

    T_CHAR      [reduce using rule 33 (type-qualifier)]
    T_INT       [reduce using rule 33 (type-qualifier)]
    T_BOOL      [reduce using rule 33 (type-qualifier)]
    KW_STRUCT   [reduce using rule 33 (type-qualifier)]
    T_SIGNED    [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED  [reduce using rule 33 (type-qualifier)]
    Q_CONST     [reduce using rule 33 (type-qualifier)]
    KW_UNION    [reduce using rule 33 (type-qualifier)]
    $default    reduce using rule 33 (type-qualifier)

    type-qualifier             go to state 168
    type-specifier             go to state 169
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60
    struct-declaration-list    go to state 186
    struct-declaration         go to state 171
    specifier-qualifier-list   go to state 172


State 168

  123 specifier-qualifier-list: type-qualifier .
  124                         | type-qualifier . specifier-qualifier-list

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    KW_STRUCT   shift, and go to state 16
    T_SIGNED    shift, and go to state 19
    T_UNSIGNED  shift, and go to state 20
    Q_CONST     shift, and go to state 21
    KW_UNION    shift, and go to state 23

    T_CHAR      [reduce using rule 33 (type-qualifier)]
    T_INT       [reduce using rule 33 (type-qualifier)]
    T_BOOL      [reduce using rule 33 (type-qualifier)]
    LO_MUL      reduce using rule 33 (type-qualifier)
    LO_MUL      [reduce using rule 123 (specifier-qualifier-list)]
    KW_STRUCT   [reduce using rule 33 (type-qualifier)]
    T_SIGNED    [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED  [reduce using rule 33 (type-qualifier)]
    Q_CONST     [reduce using rule 33 (type-qualifier)]
    KW_UNION    [reduce using rule 33 (type-qualifier)]
    IDENTIFIER  reduce using rule 33 (type-qualifier)
    IDENTIFIER  [reduce using rule 123 (specifier-qualifier-list)]
    $default    reduce using rule 33 (type-qualifier)

    type-qualifier             go to state 168
    type-specifier             go to state 169
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60
    specifier-qualifier-list   go to state 187


State 169

  121 specifier-qualifier-list: type-specifier .
  122                         | type-specifier . specifier-qualifier-list

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    KW_STRUCT   shift, and go to state 16
    T_SIGNED    shift, and go to state 19
    T_UNSIGNED  shift, and go to state 20
    Q_CONST     shift, and go to state 21
    KW_UNION    shift, and go to state 23

    T_CHAR      [reduce using rule 33 (type-qualifier)]
    T_INT       [reduce using rule 33 (type-qualifier)]
    T_BOOL      [reduce using rule 33 (type-qualifier)]
    LO_MUL      reduce using rule 33 (type-qualifier)
    LO_MUL      [reduce using rule 121 (specifier-qualifier-list)]
    KW_STRUCT   [reduce using rule 33 (type-qualifier)]
    T_SIGNED    [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED  [reduce using rule 33 (type-qualifier)]
    Q_CONST     [reduce using rule 33 (type-qualifier)]
    KW_UNION    [reduce using rule 33 (type-qualifier)]
    IDENTIFIER  reduce using rule 33 (type-qualifier)
    IDENTIFIER  [reduce using rule 121 (specifier-qualifier-list)]
    $default    reduce using rule 33 (type-qualifier)

    type-qualifier             go to state 168
    type-specifier             go to state 169
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60
    specifier-qualifier-list   go to state 188


State 170

  114 struct-or-union-specifier: struct-or-union L_BRACE struct-declaration-list . R_BRACE
  119 struct-declaration-list: struct-declaration-list . struct-declaration

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    KW_STRUCT   shift, and go to state 16
    T_SIGNED    shift, and go to state 19
    T_UNSIGNED  shift, and go to state 20
    Q_CONST     shift, and go to state 21
    KW_UNION    shift, and go to state 23
    R_BRACE     shift, and go to state 189

    T_CHAR      [reduce using rule 33 (type-qualifier)]
    T_INT       [reduce using rule 33 (type-qualifier)]
    T_BOOL      [reduce using rule 33 (type-qualifier)]
    KW_STRUCT   [reduce using rule 33 (type-qualifier)]
    T_SIGNED    [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED  [reduce using rule 33 (type-qualifier)]
    Q_CONST     [reduce using rule 33 (type-qualifier)]
    KW_UNION    [reduce using rule 33 (type-qualifier)]
    $default    reduce using rule 33 (type-qualifier)

    type-qualifier             go to state 168
    type-specifier             go to state 169
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60
    struct-declaration         go to state 190
    specifier-qualifier-list   go to state 172


State 171

  118 struct-declaration-list: struct-declaration .

    $default  reduce using rule 118 (struct-declaration-list)


State 172

  120 struct-declaration: specifier-qualifier-list . struct-declarator-list SEMICOLON

    LO_MUL      shift, and go to state 79
    IDENTIFIER  shift, and go to state 80

    struct-declarator-list  go to state 191
    struct-declarator       go to state 192
    declarator              go to state 193
    direct-declarator       go to state 84
    pointer                 go to state 85


State 173

   17 selection-statement: KW_IF L_BRACKET expression R_BRACKET . statement
   18                    | KW_IF L_BRACKET expression R_BRACKET . statement KW_ELSE statement

    T_CHAR         shift, and go to state 1
    T_INT          shift, and go to state 2
    T_BOOL         shift, and go to state 3
    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    KW_CONTINUE    shift, and go to state 12
    KW_BREAK       shift, and go to state 13
    KW_IF          shift, and go to state 14
    KW_FOR         shift, and go to state 15
    KW_STRUCT      shift, and go to state 16
    KW_WHILE       shift, and go to state 17
    KW_DO          shift, and go to state 18
    T_SIGNED       shift, and go to state 19
    T_UNSIGNED     shift, and go to state 20
    Q_CONST        shift, and go to state 21
    SEMICOLON      shift, and go to state 22
    KW_UNION       shift, and go to state 23
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26
    L_BRACE        shift, and go to state 27

    T_CHAR         [reduce using rule 33 (type-qualifier)]
    T_INT          [reduce using rule 33 (type-qualifier)]
    T_BOOL         [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFINC  [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFDEC  [reduce using rule 33 (type-qualifier)]
    LO_MUL         [reduce using rule 33 (type-qualifier)]
    LO_ADD         [reduce using rule 33 (type-qualifier)]
    LO_SUB         [reduce using rule 33 (type-qualifier)]
    LO_BIT_NOT     [reduce using rule 33 (type-qualifier)]
    LO_LGC_NOT     [reduce using rule 33 (type-qualifier)]
    LO_BIT_AND     [reduce using rule 33 (type-qualifier)]
    KW_CONTINUE    [reduce using rule 33 (type-qualifier)]
    KW_BREAK       [reduce using rule 33 (type-qualifier)]
    KW_IF          [reduce using rule 33 (type-qualifier)]
    KW_FOR         [reduce using rule 33 (type-qualifier)]
    KW_STRUCT      [reduce using rule 33 (type-qualifier)]
    KW_WHILE       [reduce using rule 33 (type-qualifier)]
    KW_DO          [reduce using rule 33 (type-qualifier)]
    T_SIGNED       [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED     [reduce using rule 33 (type-qualifier)]
    Q_CONST        [reduce using rule 33 (type-qualifier)]
    SEMICOLON      [reduce using rule 33 (type-qualifier)]
    KW_UNION       [reduce using rule 33 (type-qualifier)]
    IDENTIFIER     [reduce using rule 33 (type-qualifier)]
    INTEGER        [reduce using rule 33 (type-qualifier)]
    L_BRACKET      [reduce using rule 33 (type-qualifier)]
    L_BRACE        [reduce using rule 33 (type-qualifier)]
    $default       reduce using rule 33 (type-qualifier)

    statement                  go to state 194
    jump-statement             go to state 31
    iteration-statement        go to state 32
    selection-statement        go to state 33
    expression-statement       go to state 34
    compound-statement         go to state 35
    declaration                go to state 36
    declaration-specifiers     go to state 37
    type-qualifier             go to state 38
    expression                 go to state 39
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57
    type-specifier             go to state 58
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60


State 174

   15 iteration-statement: KW_FOR L_BRACKET SEMICOLON SEMICOLON . R_BRACKET

    R_BRACKET  shift, and go to state 195


State 175

   16 iteration-statement: KW_FOR L_BRACKET expression SEMICOLON . expression SEMICOLON expression R_BRACKET

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    expression                 go to state 196
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 176

   13 iteration-statement: KW_WHILE L_BRACKET expression R_BRACKET . statement

    T_CHAR         shift, and go to state 1
    T_INT          shift, and go to state 2
    T_BOOL         shift, and go to state 3
    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    KW_CONTINUE    shift, and go to state 12
    KW_BREAK       shift, and go to state 13
    KW_IF          shift, and go to state 14
    KW_FOR         shift, and go to state 15
    KW_STRUCT      shift, and go to state 16
    KW_WHILE       shift, and go to state 17
    KW_DO          shift, and go to state 18
    T_SIGNED       shift, and go to state 19
    T_UNSIGNED     shift, and go to state 20
    Q_CONST        shift, and go to state 21
    SEMICOLON      shift, and go to state 22
    KW_UNION       shift, and go to state 23
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26
    L_BRACE        shift, and go to state 27

    T_CHAR         [reduce using rule 33 (type-qualifier)]
    T_INT          [reduce using rule 33 (type-qualifier)]
    T_BOOL         [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFINC  [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFDEC  [reduce using rule 33 (type-qualifier)]
    LO_MUL         [reduce using rule 33 (type-qualifier)]
    LO_ADD         [reduce using rule 33 (type-qualifier)]
    LO_SUB         [reduce using rule 33 (type-qualifier)]
    LO_BIT_NOT     [reduce using rule 33 (type-qualifier)]
    LO_LGC_NOT     [reduce using rule 33 (type-qualifier)]
    LO_BIT_AND     [reduce using rule 33 (type-qualifier)]
    KW_CONTINUE    [reduce using rule 33 (type-qualifier)]
    KW_BREAK       [reduce using rule 33 (type-qualifier)]
    KW_IF          [reduce using rule 33 (type-qualifier)]
    KW_FOR         [reduce using rule 33 (type-qualifier)]
    KW_STRUCT      [reduce using rule 33 (type-qualifier)]
    KW_WHILE       [reduce using rule 33 (type-qualifier)]
    KW_DO          [reduce using rule 33 (type-qualifier)]
    T_SIGNED       [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED     [reduce using rule 33 (type-qualifier)]
    Q_CONST        [reduce using rule 33 (type-qualifier)]
    SEMICOLON      [reduce using rule 33 (type-qualifier)]
    KW_UNION       [reduce using rule 33 (type-qualifier)]
    IDENTIFIER     [reduce using rule 33 (type-qualifier)]
    INTEGER        [reduce using rule 33 (type-qualifier)]
    L_BRACKET      [reduce using rule 33 (type-qualifier)]
    L_BRACE        [reduce using rule 33 (type-qualifier)]
    $default       reduce using rule 33 (type-qualifier)

    statement                  go to state 197
    jump-statement             go to state 31
    iteration-statement        go to state 32
    selection-statement        go to state 33
    expression-statement       go to state 34
    compound-statement         go to state 35
    declaration                go to state 36
    declaration-specifiers     go to state 37
    type-qualifier             go to state 38
    expression                 go to state 39
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57
    type-specifier             go to state 58
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60


State 177

   14 iteration-statement: KW_DO statement KW_WHILE L_BRACKET . expression R_BRACKET

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    expression                 go to state 198
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 178

   86 cast-expression: L_BRACKET type-specifier R_BRACKET cast-expression .

    $default  reduce using rule 86 (cast-expression)


State 179

   35 init-declarator-list: init-declarator-list LO_COMMA init-declarator .

    $default  reduce using rule 35 (init-declarator-list)


State 180

   39 initializer: L_BRACE . initializer-list R_BRACE

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26
    L_BRACE        shift, and go to state 180

    initializer                go to state 199
    initializer-list           go to state 200
    assignment-expression      go to state 182
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 181

   37 init-declarator: declarator RO_ASSIGN initializer .

    $default  reduce using rule 37 (init-declarator)


State 182

   38 initializer: assignment-expression .

    $default  reduce using rule 38 (initializer)


State 183

  132 direct-declarator: direct-declarator L_SQ_BRACKET assignment-expression . R_SQ_BRACKET

    R_SQ_BRACKET  shift, and go to state 201


State 184

   56 conditional-expression: logical-OR-expression RO_TRI_QUES expression RO_TRI_COLON . conditional-expression

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    conditional-expression     go to state 202
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 109
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 185

   98 postfix-expression: postfix-expression L_SQ_BRACKET expression R_SQ_BRACKET .

    $default  reduce using rule 98 (postfix-expression)


State 186

  113 struct-or-union-specifier: struct-or-union IDENTIFIER L_BRACE struct-declaration-list . R_BRACE
  119 struct-declaration-list: struct-declaration-list . struct-declaration

    T_CHAR      shift, and go to state 1
    T_INT       shift, and go to state 2
    T_BOOL      shift, and go to state 3
    KW_STRUCT   shift, and go to state 16
    T_SIGNED    shift, and go to state 19
    T_UNSIGNED  shift, and go to state 20
    Q_CONST     shift, and go to state 21
    KW_UNION    shift, and go to state 23
    R_BRACE     shift, and go to state 203

    T_CHAR      [reduce using rule 33 (type-qualifier)]
    T_INT       [reduce using rule 33 (type-qualifier)]
    T_BOOL      [reduce using rule 33 (type-qualifier)]
    KW_STRUCT   [reduce using rule 33 (type-qualifier)]
    T_SIGNED    [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED  [reduce using rule 33 (type-qualifier)]
    Q_CONST     [reduce using rule 33 (type-qualifier)]
    KW_UNION    [reduce using rule 33 (type-qualifier)]
    $default    reduce using rule 33 (type-qualifier)

    type-qualifier             go to state 168
    type-specifier             go to state 169
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60
    struct-declaration         go to state 190
    specifier-qualifier-list   go to state 172


State 187

  124 specifier-qualifier-list: type-qualifier specifier-qualifier-list .

    $default  reduce using rule 124 (specifier-qualifier-list)


State 188

  122 specifier-qualifier-list: type-specifier specifier-qualifier-list .

    $default  reduce using rule 122 (specifier-qualifier-list)


State 189

  114 struct-or-union-specifier: struct-or-union L_BRACE struct-declaration-list R_BRACE .

    $default  reduce using rule 114 (struct-or-union-specifier)


State 190

  119 struct-declaration-list: struct-declaration-list struct-declaration .

    $default  reduce using rule 119 (struct-declaration-list)


State 191

  120 struct-declaration: specifier-qualifier-list struct-declarator-list . SEMICOLON
  126 struct-declarator-list: struct-declarator-list . LO_COMMA struct-declarator

    LO_COMMA   shift, and go to state 204
    SEMICOLON  shift, and go to state 205


State 192

  125 struct-declarator-list: struct-declarator .

    $default  reduce using rule 125 (struct-declarator-list)


State 193

  127 struct-declarator: declarator .
  128                  | declarator . COLON INTEGER

    COLON  shift, and go to state 206

    $default  reduce using rule 127 (struct-declarator)


State 194

   17 selection-statement: KW_IF L_BRACKET expression R_BRACKET statement .
   18                    | KW_IF L_BRACKET expression R_BRACKET statement . KW_ELSE statement

    KW_ELSE  shift, and go to state 207

    KW_ELSE   [reduce using rule 17 (selection-statement)]
    $default  reduce using rule 17 (selection-statement)


State 195

   15 iteration-statement: KW_FOR L_BRACKET SEMICOLON SEMICOLON R_BRACKET .

    $default  reduce using rule 15 (iteration-statement)


State 196

   16 iteration-statement: KW_FOR L_BRACKET expression SEMICOLON expression . SEMICOLON expression R_BRACKET
   43 expression: expression . LO_COMMA assignment-expression

    LO_COMMA   shift, and go to state 87
    SEMICOLON  shift, and go to state 208


State 197

   13 iteration-statement: KW_WHILE L_BRACKET expression R_BRACKET statement .

    $default  reduce using rule 13 (iteration-statement)


State 198

   14 iteration-statement: KW_DO statement KW_WHILE L_BRACKET expression . R_BRACKET
   43 expression: expression . LO_COMMA assignment-expression

    LO_COMMA   shift, and go to state 87
    R_BRACKET  shift, and go to state 209


State 199

   40 initializer-list: initializer .

    $default  reduce using rule 40 (initializer-list)


State 200

   39 initializer: L_BRACE initializer-list . R_BRACE
   41 initializer-list: initializer-list . LO_COMMA initializer

    LO_COMMA  shift, and go to state 210
    R_BRACE   shift, and go to state 211


State 201

  132 direct-declarator: direct-declarator L_SQ_BRACKET assignment-expression R_SQ_BRACKET .

    $default  reduce using rule 132 (direct-declarator)


State 202

   56 conditional-expression: logical-OR-expression RO_TRI_QUES expression RO_TRI_COLON conditional-expression .

    $default  reduce using rule 56 (conditional-expression)


State 203

  113 struct-or-union-specifier: struct-or-union IDENTIFIER L_BRACE struct-declaration-list R_BRACE .

    $default  reduce using rule 113 (struct-or-union-specifier)


State 204

  126 struct-declarator-list: struct-declarator-list LO_COMMA . struct-declarator

    LO_MUL      shift, and go to state 79
    IDENTIFIER  shift, and go to state 80

    struct-declarator  go to state 212
    declarator         go to state 193
    direct-declarator  go to state 84
    pointer            go to state 85


State 205

  120 struct-declaration: specifier-qualifier-list struct-declarator-list SEMICOLON .

    $default  reduce using rule 120 (struct-declaration)


State 206

  128 struct-declarator: declarator COLON . INTEGER

    INTEGER  shift, and go to state 213


State 207

   18 selection-statement: KW_IF L_BRACKET expression R_BRACKET statement KW_ELSE . statement

    T_CHAR         shift, and go to state 1
    T_INT          shift, and go to state 2
    T_BOOL         shift, and go to state 3
    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    KW_CONTINUE    shift, and go to state 12
    KW_BREAK       shift, and go to state 13
    KW_IF          shift, and go to state 14
    KW_FOR         shift, and go to state 15
    KW_STRUCT      shift, and go to state 16
    KW_WHILE       shift, and go to state 17
    KW_DO          shift, and go to state 18
    T_SIGNED       shift, and go to state 19
    T_UNSIGNED     shift, and go to state 20
    Q_CONST        shift, and go to state 21
    SEMICOLON      shift, and go to state 22
    KW_UNION       shift, and go to state 23
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26
    L_BRACE        shift, and go to state 27

    T_CHAR         [reduce using rule 33 (type-qualifier)]
    T_INT          [reduce using rule 33 (type-qualifier)]
    T_BOOL         [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFINC  [reduce using rule 33 (type-qualifier)]
    LO_AS_SELFDEC  [reduce using rule 33 (type-qualifier)]
    LO_MUL         [reduce using rule 33 (type-qualifier)]
    LO_ADD         [reduce using rule 33 (type-qualifier)]
    LO_SUB         [reduce using rule 33 (type-qualifier)]
    LO_BIT_NOT     [reduce using rule 33 (type-qualifier)]
    LO_LGC_NOT     [reduce using rule 33 (type-qualifier)]
    LO_BIT_AND     [reduce using rule 33 (type-qualifier)]
    KW_CONTINUE    [reduce using rule 33 (type-qualifier)]
    KW_BREAK       [reduce using rule 33 (type-qualifier)]
    KW_IF          [reduce using rule 33 (type-qualifier)]
    KW_FOR         [reduce using rule 33 (type-qualifier)]
    KW_STRUCT      [reduce using rule 33 (type-qualifier)]
    KW_WHILE       [reduce using rule 33 (type-qualifier)]
    KW_DO          [reduce using rule 33 (type-qualifier)]
    T_SIGNED       [reduce using rule 33 (type-qualifier)]
    T_UNSIGNED     [reduce using rule 33 (type-qualifier)]
    Q_CONST        [reduce using rule 33 (type-qualifier)]
    SEMICOLON      [reduce using rule 33 (type-qualifier)]
    KW_UNION       [reduce using rule 33 (type-qualifier)]
    IDENTIFIER     [reduce using rule 33 (type-qualifier)]
    INTEGER        [reduce using rule 33 (type-qualifier)]
    L_BRACKET      [reduce using rule 33 (type-qualifier)]
    L_BRACE        [reduce using rule 33 (type-qualifier)]
    $default       reduce using rule 33 (type-qualifier)

    statement                  go to state 214
    jump-statement             go to state 31
    iteration-statement        go to state 32
    selection-statement        go to state 33
    expression-statement       go to state 34
    compound-statement         go to state 35
    declaration                go to state 36
    declaration-specifiers     go to state 37
    type-qualifier             go to state 38
    expression                 go to state 39
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57
    type-specifier             go to state 58
    struct-or-union-specifier  go to state 59
    struct-or-union            go to state 60


State 208

   16 iteration-statement: KW_FOR L_BRACKET expression SEMICOLON expression SEMICOLON . expression R_BRACKET

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26

    expression                 go to state 215
    assignment-expression      go to state 40
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 209

   14 iteration-statement: KW_DO statement KW_WHILE L_BRACKET expression R_BRACKET .

    $default  reduce using rule 14 (iteration-statement)


State 210

   41 initializer-list: initializer-list LO_COMMA . initializer

    LO_AS_SELFINC  shift, and go to state 4
    LO_AS_SELFDEC  shift, and go to state 5
    LO_MUL         shift, and go to state 6
    LO_ADD         shift, and go to state 7
    LO_SUB         shift, and go to state 8
    LO_BIT_NOT     shift, and go to state 9
    LO_LGC_NOT     shift, and go to state 10
    LO_BIT_AND     shift, and go to state 11
    IDENTIFIER     shift, and go to state 24
    INTEGER        shift, and go to state 25
    L_BRACKET      shift, and go to state 26
    L_BRACE        shift, and go to state 180

    initializer                go to state 216
    assignment-expression      go to state 182
    conditional-expression     go to state 41
    logical-OR-expression      go to state 42
    logical-AND-expression     go to state 43
    inclusive-OR-expression    go to state 44
    exclusive-OR-expression    go to state 45
    AND-expression             go to state 46
    equality-expression        go to state 47
    relational-expression      go to state 48
    shift-expression           go to state 49
    additive-expression        go to state 50
    multiplicative-expression  go to state 51
    cast-expression            go to state 52
    unary-operator             go to state 53
    unary-expression           go to state 54
    postfix-expression         go to state 55
    primary-expression         go to state 56
    constant                   go to state 57


State 211

   39 initializer: L_BRACE initializer-list R_BRACE .

    $default  reduce using rule 39 (initializer)


State 212

  126 struct-declarator-list: struct-declarator-list LO_COMMA struct-declarator .

    $default  reduce using rule 126 (struct-declarator-list)


State 213

  128 struct-declarator: declarator COLON INTEGER .

    $default  reduce using rule 128 (struct-declarator)


State 214

   18 selection-statement: KW_IF L_BRACKET expression R_BRACKET statement KW_ELSE statement .

    $default  reduce using rule 18 (selection-statement)


State 215

   16 iteration-statement: KW_FOR L_BRACKET expression SEMICOLON expression SEMICOLON expression . R_BRACKET
   43 expression: expression . LO_COMMA assignment-expression

    LO_COMMA   shift, and go to state 87
    R_BRACKET  shift, and go to state 217


State 216

   41 initializer-list: initializer-list LO_COMMA initializer .

    $default  reduce using rule 41 (initializer-list)


State 217

   16 iteration-statement: KW_FOR L_BRACKET expression SEMICOLON expression SEMICOLON expression R_BRACKET .

    $default  reduce using rule 16 (iteration-statement)
